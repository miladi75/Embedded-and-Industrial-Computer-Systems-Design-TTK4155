
Node2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e10  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000444  20000000  00080e10  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000090  20000444  00081254  00020444  2**2
                  ALLOC
  3 .stack        00000404  200004d4  000812e4  00020444  2**0
                  ALLOC
  4 .heap         00000200  200008d8  000816e8  00020444  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020444  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002046d  2**0
                  CONTENTS, READONLY
  7 .debug_info   00005fbb  00000000  00000000  000204c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000116a  00000000  00000000  00026481  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000238  00000000  00000000  000275eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000001a8  00000000  00000000  00027823  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00012f07  00000000  00000000  000279cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00005575  00000000  00000000  0003a8d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0005545a  00000000  00000000  0003fe47  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000005d8  00000000  00000000  000952a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00000ef6  00000000  00000000  0009587c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	d8 08 00 20 15 05 08 00 11 05 08 00 11 05 08 00     ... ............
   80010:	11 05 08 00 11 05 08 00 11 05 08 00 00 00 00 00     ................
	...
   8002c:	11 05 08 00 11 05 08 00 00 00 00 00 11 05 08 00     ................
   8003c:	11 05 08 00 11 05 08 00 11 05 08 00 11 05 08 00     ................
   8004c:	11 05 08 00 11 05 08 00 11 05 08 00 11 05 08 00     ................
   8005c:	11 05 08 00 4d 0b 08 00 11 05 08 00 00 00 00 00     ....M...........
   8006c:	11 05 08 00 11 05 08 00 11 05 08 00 11 05 08 00     ................
	...
   80084:	11 05 08 00 11 05 08 00 11 05 08 00 11 05 08 00     ................
   80094:	11 05 08 00 11 05 08 00 11 05 08 00 11 05 08 00     ................
   800a4:	00 00 00 00 11 05 08 00 11 05 08 00 11 05 08 00     ................
   800b4:	11 05 08 00 11 05 08 00 11 05 08 00 11 05 08 00     ................
   800c4:	11 05 08 00 11 05 08 00 11 05 08 00 11 05 08 00     ................
   800d4:	11 05 08 00 11 05 08 00 11 05 08 00 11 05 08 00     ................
   800e4:	11 05 08 00 11 05 08 00 21 03 08 00 11 05 08 00     ........!.......

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20000444 	.word	0x20000444
   80110:	00000000 	.word	0x00000000
   80114:	00080e10 	.word	0x00080e10

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	00080e10 	.word	0x00080e10
   80154:	20000448 	.word	0x20000448
   80158:	00080e10 	.word	0x00080e10
   8015c:	00000000 	.word	0x00000000

00080160 <ADC_init>:
        __asm__ volatile("nop\n\t"); // busy wait
}

void ADC_init(void){
	
	ADC->ADC_MR = ADC_MR_FREERUN; //12-bit, no prescaler, freerun mode
   80160:	4b08      	ldr	r3, [pc, #32]	; (80184 <ADC_init+0x24>)
   80162:	2280      	movs	r2, #128	; 0x80
   80164:	605a      	str	r2, [r3, #4]
	ADC->ADC_CHER = ADC_CHER_CH0; // AD0 peripheral, PIO pin PA2, pin A7 on shield
   80166:	2201      	movs	r2, #1
   80168:	611a      	str	r2, [r3, #16]
	PMC->PMC_PCR = PMC_PCR_EN | PMC_PCR_DIV_PERIPH_DIV_MCK | (ID_ADC << PMC_PCR_PID_Pos);
   8016a:	4a07      	ldr	r2, [pc, #28]	; (80188 <ADC_init+0x28>)
   8016c:	4907      	ldr	r1, [pc, #28]	; (8018c <ADC_init+0x2c>)
   8016e:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
	PMC->PMC_PCER1 |= 1 << (ID_ADC - 32); //clk = mck, 
   80172:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
   80176:	f041 0120 	orr.w	r1, r1, #32
   8017a:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
	ADC->ADC_CR = ADC_CR_START; // start
   8017e:	2202      	movs	r2, #2
   80180:	601a      	str	r2, [r3, #0]
   80182:	4770      	bx	lr
   80184:	400c0000 	.word	0x400c0000
   80188:	400e0600 	.word	0x400e0600
   8018c:	10000025 	.word	0x10000025

00080190 <ADC_read>:
	
 }
 
 
 uint16_t ADC_read(){
	 uint16_t adc_value = ADC->ADC_CDR[0];
   80190:	4b04      	ldr	r3, [pc, #16]	; (801a4 <ADC_read+0x14>)
   80192:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   80194:	b29b      	uxth	r3, r3
	 if(adc_value<=1000){
   80196:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   8019a:	d901      	bls.n	801a0 <ADC_read+0x10>
		 
	 }else{
		//printf("-----------------> %d\n", ADC->ADC_CDR[0]);	 
		 //busyWait();
		 //delay();
		 return TRUE;
   8019c:	2001      	movs	r0, #1
	 }
	 
	 
	 
 }
   8019e:	4770      	bx	lr
		 return FALSE;
   801a0:	2000      	movs	r0, #0
   801a2:	4770      	bx	lr
   801a4:	400c0000 	.word	0x400c0000

000801a8 <can_init>:
 * \retval Success(0) or failure(1)
 */


uint8_t can_init(uint32_t can_br, uint8_t num_tx_mb, uint8_t num_rx_mb)
{
   801a8:	b4f0      	push	{r4, r5, r6, r7}
	
	//Make sure num_rx_mb and num_tx_mb is valid
	if(num_rx_mb > 8 | num_tx_mb > 8 | num_rx_mb + num_tx_mb > 8)
   801aa:	1857      	adds	r7, r2, r1
   801ac:	2f08      	cmp	r7, #8
   801ae:	bfd4      	ite	le
   801b0:	2300      	movle	r3, #0
   801b2:	2301      	movgt	r3, #1
   801b4:	2908      	cmp	r1, #8
   801b6:	bf98      	it	ls
   801b8:	2a08      	cmpls	r2, #8
   801ba:	d85c      	bhi.n	80276 <can_init+0xce>
   801bc:	460d      	mov	r5, r1
   801be:	2b00      	cmp	r3, #0
   801c0:	d159      	bne.n	80276 <can_init+0xce>


	uint32_t ul_status; 
	
	//Disable can
	CAN0->CAN_MR &= ~CAN_MR_CANEN; 
   801c2:	4a2e      	ldr	r2, [pc, #184]	; (8027c <can_init+0xd4>)
   801c4:	6813      	ldr	r3, [r2, #0]
   801c6:	f023 0301 	bic.w	r3, r3, #1
   801ca:	6013      	str	r3, [r2, #0]
	//Clear status register on read
	ul_status = CAN0->CAN_SR; 
   801cc:	6913      	ldr	r3, [r2, #16]
	
	
	// Disable interrupts on CANH and CANL pins
	PIOA->PIO_IDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   801ce:	4b2c      	ldr	r3, [pc, #176]	; (80280 <can_init+0xd8>)
   801d0:	f44f 7440 	mov.w	r4, #768	; 0x300
   801d4:	645c      	str	r4, [r3, #68]	; 0x44
	
	//Select CAN0 RX and TX in PIOA
	uint32_t ul_sr = PIOA->PIO_ABSR;
   801d6:	6f1c      	ldr	r4, [r3, #112]	; 0x70
	PIOA->PIO_ABSR = ~(PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0) & ul_sr;
   801d8:	f024 0403 	bic.w	r4, r4, #3
   801dc:	671c      	str	r4, [r3, #112]	; 0x70
	
	// Disable the Parallel IO (PIO) of the Rx and Tx pins so that the peripheral controller can use them
	PIOA->PIO_PDR = PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0;
   801de:	2403      	movs	r4, #3
   801e0:	605c      	str	r4, [r3, #4]
	
	// Enable pull up on CANH and CANL pin
	PIOA->PIO_PUER = (PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0);
   801e2:	665c      	str	r4, [r3, #100]	; 0x64
	
	
	//Enable Clock for CAN0 in PMC
	PMC->PMC_PCR = PMC_PCR_EN | (0 << PMC_PCR_DIV_Pos) | PMC_PCR_CMD | (ID_CAN0 << PMC_PCR_PID_Pos); // DIV = 1(can clk = MCK/2), CMD = 1 (write), PID = 2B (CAN0)
   801e4:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   801e8:	4c26      	ldr	r4, [pc, #152]	; (80284 <can_init+0xdc>)
   801ea:	f8c3 410c 	str.w	r4, [r3, #268]	; 0x10c
	PMC->PMC_PCER1 |= 1 << (ID_CAN0 - 32);
   801ee:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
   801f2:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
   801f6:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
	
	//Set baudrate, Phase1, phase2 and propagation delay for can bus. Must match on all nodes!
	CAN0->CAN_BR = can_br; 
   801fa:	6150      	str	r0, [r2, #20]
	

	/****** Start of mailbox configuration ******/

	uint32_t can_ier = 0;
   801fc:	2400      	movs	r4, #0

	/* Configure receive mailboxes */
	for (int n = num_tx_mb; n <= num_rx_mb + num_tx_mb; n++)  //Simply one mailbox setup for all messages. You might want to apply filter for them.
   801fe:	e019      	b.n	80234 <can_init+0x8c>
	{
		CAN0->CAN_MB[n].CAN_MAM = 0; //Accept all messages
   80200:	481e      	ldr	r0, [pc, #120]	; (8027c <can_init+0xd4>)
   80202:	f101 0310 	add.w	r3, r1, #16
   80206:	015b      	lsls	r3, r3, #5
   80208:	18c2      	adds	r2, r0, r3
   8020a:	2600      	movs	r6, #0
   8020c:	6056      	str	r6, [r2, #4]
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   8020e:	eb00 1241 	add.w	r2, r0, r1, lsl #5
   80212:	f04f 5600 	mov.w	r6, #536870912	; 0x20000000
   80216:	f8c2 6208 	str.w	r6, [r2, #520]	; 0x208
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_RX);
   8021a:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
   8021e:	50c6      	str	r6, [r0, r3]
		CAN0->CAN_MB[n].CAN_MCR |= CAN_MCR_MTCR;
   80220:	f8d2 321c 	ldr.w	r3, [r2, #540]	; 0x21c
   80224:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   80228:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c

		can_ier |= 1 << n; //Enable interrupt on rx mailbox
   8022c:	2301      	movs	r3, #1
   8022e:	408b      	lsls	r3, r1
   80230:	431c      	orrs	r4, r3
	for (int n = num_tx_mb; n <= num_rx_mb + num_tx_mb; n++)  //Simply one mailbox setup for all messages. You might want to apply filter for them.
   80232:	3101      	adds	r1, #1
   80234:	42b9      	cmp	r1, r7
   80236:	dde3      	ble.n	80200 <can_init+0x58>
   80238:	2300      	movs	r3, #0
   8023a:	e00d      	b.n	80258 <can_init+0xb0>
	}
	
	/*Configure transmit mailboxes */
	for (int n = 0; n < num_tx_mb; n++)
	{
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   8023c:	490f      	ldr	r1, [pc, #60]	; (8027c <can_init+0xd4>)
   8023e:	eb01 1243 	add.w	r2, r1, r3, lsl #5
   80242:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
   80246:	f8c2 0208 	str.w	r0, [r2, #520]	; 0x208
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_TX);
   8024a:	f103 0210 	add.w	r2, r3, #16
   8024e:	0152      	lsls	r2, r2, #5
   80250:	f04f 7040 	mov.w	r0, #50331648	; 0x3000000
   80254:	5088      	str	r0, [r1, r2]
	for (int n = 0; n < num_tx_mb; n++)
   80256:	3301      	adds	r3, #1
   80258:	42ab      	cmp	r3, r5
   8025a:	dbef      	blt.n	8023c <can_init+0x94>
	}
	
	/****** End of mailbox configuraion ******/

	//Enable interrupt on receive mailboxes
	CAN0->CAN_IER = can_ier;
   8025c:	4b07      	ldr	r3, [pc, #28]	; (8027c <can_init+0xd4>)
   8025e:	605c      	str	r4, [r3, #4]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   80260:	f44f 6100 	mov.w	r1, #2048	; 0x800
   80264:	4a08      	ldr	r2, [pc, #32]	; (80288 <can_init+0xe0>)
   80266:	6051      	str	r1, [r2, #4]

	//Enable interrupt in NVIC 
	NVIC_EnableIRQ(ID_CAN0);

	//enable CAN
	CAN0->CAN_MR |= CAN_MR_CANEN;
   80268:	681a      	ldr	r2, [r3, #0]
   8026a:	f042 0201 	orr.w	r2, r2, #1
   8026e:	601a      	str	r2, [r3, #0]

	return 0;
   80270:	2000      	movs	r0, #0
}
   80272:	bcf0      	pop	{r4, r5, r6, r7}
   80274:	4770      	bx	lr
		return 1; //Too many mailboxes is configured
   80276:	2001      	movs	r0, #1
   80278:	e7fb      	b.n	80272 <can_init+0xca>
   8027a:	bf00      	nop
   8027c:	400b4000 	.word	0x400b4000
   80280:	400e0e00 	.word	0x400e0e00
   80284:	1000102b 	.word	0x1000102b
   80288:	e000e100 	.word	0xe000e100

0008028c <can_init_def_tx_rx_mb>:
{
   8028c:	b508      	push	{r3, lr}
	return can_init(can_br, 1, 2);
   8028e:	2202      	movs	r2, #2
   80290:	2101      	movs	r1, #1
   80292:	4b01      	ldr	r3, [pc, #4]	; (80298 <can_init_def_tx_rx_mb+0xc>)
   80294:	4798      	blx	r3
}
   80296:	bd08      	pop	{r3, pc}
   80298:	000801a9 	.word	0x000801a9

0008029c <can_receive>:
 * \retval Success(0) or failure(1)
 */
uint8_t can_receive(CAN_MESSAGE* can_msg, uint8_t rx_mb_id)
{
	//Check that mailbox is ready
	if(CAN0->CAN_MB[rx_mb_id].CAN_MSR & CAN_MSR_MRDY)
   8029c:	014b      	lsls	r3, r1, #5
   8029e:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   802a2:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   802a6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
   802aa:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   802ae:	d033      	beq.n	80318 <can_receive+0x7c>
{
   802b0:	b470      	push	{r4, r5, r6}
	{
		//Get data from CAN mailbox
		uint32_t data_low = CAN0->CAN_MB[rx_mb_id].CAN_MDL;
   802b2:	014b      	lsls	r3, r1, #5
   802b4:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   802b8:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   802bc:	f8d3 4214 	ldr.w	r4, [r3, #532]	; 0x214
		uint32_t data_high = CAN0->CAN_MB[rx_mb_id].CAN_MDH;
   802c0:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
		
		//Get message ID
		can_msg->id = (uint16_t)((CAN0->CAN_MB[rx_mb_id].CAN_MID & CAN_MID_MIDvA_Msk) >> CAN_MID_MIDvA_Pos);
   802c4:	f8d3 5208 	ldr.w	r5, [r3, #520]	; 0x208
   802c8:	f3c5 458a 	ubfx	r5, r5, #18, #11
   802cc:	8005      	strh	r5, [r0, #0]
		
		//Get data length
		can_msg->data_length = (uint8_t)((CAN0->CAN_MB[rx_mb_id].CAN_MSR & CAN_MSR_MDLC_Msk) >> CAN_MSR_MDLC_Pos);
   802ce:	f8d3 5210 	ldr.w	r5, [r3, #528]	; 0x210
   802d2:	f3c5 4503 	ubfx	r5, r5, #16, #4
   802d6:	7085      	strb	r5, [r0, #2]
		
		//Put data in CAN_MESSAGE object
		for(int i = 0; i < can_msg->data_length;i++)
   802d8:	2300      	movs	r3, #0
   802da:	e003      	b.n	802e4 <can_receive+0x48>
				can_msg->data[i] = (char)(data_low & 0xff);
				data_low = data_low >> 8;
			}
			else
			{
				can_msg->data[i] = (uint8_t)(data_high & 0xff);
   802dc:	18c6      	adds	r6, r0, r3
   802de:	70f2      	strb	r2, [r6, #3]
				data_high = data_high >> 8;
   802e0:	0a12      	lsrs	r2, r2, #8
		for(int i = 0; i < can_msg->data_length;i++)
   802e2:	3301      	adds	r3, #1
   802e4:	42ab      	cmp	r3, r5
   802e6:	da05      	bge.n	802f4 <can_receive+0x58>
			if(i < 4)
   802e8:	2b03      	cmp	r3, #3
   802ea:	dcf7      	bgt.n	802dc <can_receive+0x40>
				can_msg->data[i] = (char)(data_low & 0xff);
   802ec:	18c6      	adds	r6, r0, r3
   802ee:	70f4      	strb	r4, [r6, #3]
				data_low = data_low >> 8;
   802f0:	0a24      	lsrs	r4, r4, #8
   802f2:	e7f6      	b.n	802e2 <can_receive+0x46>
			}
		}
		
		//Reset for new receive
		CAN0->CAN_MB[rx_mb_id].CAN_MMR = CAN_MMR_MOT_MB_RX;
   802f4:	4b09      	ldr	r3, [pc, #36]	; (8031c <can_receive+0x80>)
   802f6:	f101 0210 	add.w	r2, r1, #16
   802fa:	0152      	lsls	r2, r2, #5
   802fc:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   80300:	5098      	str	r0, [r3, r2]
		CAN0->CAN_MB[rx_mb_id].CAN_MCR |= CAN_MCR_MTCR;
   80302:	eb03 1141 	add.w	r1, r3, r1, lsl #5
   80306:	f8d1 321c 	ldr.w	r3, [r1, #540]	; 0x21c
   8030a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   8030e:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c
		return 0;
   80312:	2000      	movs	r0, #0
	}
	else //Mailbox busy
	{
		return 1;
	}
}
   80314:	bc70      	pop	{r4, r5, r6}
   80316:	4770      	bx	lr
		return 1;
   80318:	2001      	movs	r0, #1
   8031a:	4770      	bx	lr
   8031c:	400b4000 	.word	0x400b4000

00080320 <CAN0_Handler>:
 * \param void
 *
 * \retval 
 */
void CAN0_Handler( void )
{
   80320:	b570      	push	{r4, r5, r6, lr}
   80322:	b084      	sub	sp, #16
	if(DEBUG_INTERRUPT)printf("CAN0 interrupt\n\r");
	char can_sr = CAN0->CAN_SR; 
   80324:	4b56      	ldr	r3, [pc, #344]	; (80480 <CAN0_Handler+0x160>)
   80326:	691c      	ldr	r4, [r3, #16]
	
	//RX interrupt
	if(can_sr & (CAN_SR_MB1 | CAN_SR_MB2) )//Only mailbox 1 and 2 specified for receiving
   80328:	f014 0f06 	tst.w	r4, #6
   8032c:	f000 809b 	beq.w	80466 <CAN0_Handler+0x146>
	{
		CAN_MESSAGE message;
		if(can_sr & CAN_SR_MB1)  //Mailbox 1 event
   80330:	f014 0f02 	tst.w	r4, #2
   80334:	d114      	bne.n	80360 <CAN0_Handler+0x40>
		{
			can_receive(&message, 1);

		}
		else if(can_sr & CAN_SR_MB2) //Mailbox 2 event
   80336:	f014 0f04 	tst.w	r4, #4
   8033a:	d016      	beq.n	8036a <CAN0_Handler+0x4a>
		
		{
			can_receive(&message, 2);
   8033c:	2102      	movs	r1, #2
   8033e:	a801      	add	r0, sp, #4
   80340:	4b50      	ldr	r3, [pc, #320]	; (80484 <CAN0_Handler+0x164>)
   80342:	4798      	blx	r3
		else
		{
			printf("CAN0 message arrived in non-used mailbox\n\r");
		}
		
		if (message.id == 50)
   80344:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   80348:	2b32      	cmp	r3, #50	; 0x32
   8034a:	d012      	beq.n	80372 <CAN0_Handler+0x52>
			printf("data %c\n",message.data[2]);
			printf("data %c\n",message.data[3]);
			printf("data %c\n",message.data[4]);
		}
		
		if (message.id == 10)
   8034c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   80350:	2b0a      	cmp	r3, #10
   80352:	d02f      	beq.n	803b4 <CAN0_Handler+0x94>
				printf("%c\n",message.data[0]);
			}
		}
		
		
		if (message.id == 20)
   80354:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   80358:	2b14      	cmp	r3, #20
   8035a:	d073      	beq.n	80444 <CAN0_Handler+0x124>
			
		}

		if(DEBUG_INTERRUPT)printf("message id: %d\n\r", message.id);
		if(DEBUG_INTERRUPT)printf("message data length: %d\n\r", message.data_length);
		for (int i = 0; i < message.data_length; i++)
   8035c:	2300      	movs	r3, #0
   8035e:	e07e      	b.n	8045e <CAN0_Handler+0x13e>
			can_receive(&message, 1);
   80360:	2101      	movs	r1, #1
   80362:	a801      	add	r0, sp, #4
   80364:	4b47      	ldr	r3, [pc, #284]	; (80484 <CAN0_Handler+0x164>)
   80366:	4798      	blx	r3
   80368:	e7ec      	b.n	80344 <CAN0_Handler+0x24>
			printf("CAN0 message arrived in non-used mailbox\n\r");
   8036a:	4847      	ldr	r0, [pc, #284]	; (80488 <CAN0_Handler+0x168>)
   8036c:	4b47      	ldr	r3, [pc, #284]	; (8048c <CAN0_Handler+0x16c>)
   8036e:	4798      	blx	r3
   80370:	e7e8      	b.n	80344 <CAN0_Handler+0x24>
			printf("melding");
   80372:	4847      	ldr	r0, [pc, #284]	; (80490 <CAN0_Handler+0x170>)
   80374:	4d45      	ldr	r5, [pc, #276]	; (8048c <CAN0_Handler+0x16c>)
   80376:	47a8      	blx	r5
			printf("id %d\n",message.id);
   80378:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   8037c:	4845      	ldr	r0, [pc, #276]	; (80494 <CAN0_Handler+0x174>)
   8037e:	47a8      	blx	r5
			printf("length %d\n",message.data_length);
   80380:	f89d 1006 	ldrb.w	r1, [sp, #6]
   80384:	4844      	ldr	r0, [pc, #272]	; (80498 <CAN0_Handler+0x178>)
   80386:	47a8      	blx	r5
			printf("data %c\n",message.data[0]);
   80388:	4e44      	ldr	r6, [pc, #272]	; (8049c <CAN0_Handler+0x17c>)
   8038a:	f89d 1007 	ldrb.w	r1, [sp, #7]
   8038e:	4630      	mov	r0, r6
   80390:	47a8      	blx	r5
			printf("data %c\n",message.data[1]);
   80392:	f89d 1008 	ldrb.w	r1, [sp, #8]
   80396:	4630      	mov	r0, r6
   80398:	47a8      	blx	r5
			printf("data %c\n",message.data[2]);
   8039a:	f89d 1009 	ldrb.w	r1, [sp, #9]
   8039e:	4630      	mov	r0, r6
   803a0:	47a8      	blx	r5
			printf("data %c\n",message.data[3]);
   803a2:	f89d 100a 	ldrb.w	r1, [sp, #10]
   803a6:	4630      	mov	r0, r6
   803a8:	47a8      	blx	r5
			printf("data %c\n",message.data[4]);
   803aa:	f89d 100b 	ldrb.w	r1, [sp, #11]
   803ae:	4630      	mov	r0, r6
   803b0:	47a8      	blx	r5
   803b2:	e7cb      	b.n	8034c <CAN0_Handler+0x2c>
			if (message.data[0] == UP)
   803b4:	f89d 3007 	ldrb.w	r3, [sp, #7]
   803b8:	4a39      	ldr	r2, [pc, #228]	; (804a0 <CAN0_Handler+0x180>)
   803ba:	8812      	ldrh	r2, [r2, #0]
   803bc:	4293      	cmp	r3, r2
   803be:	d019      	beq.n	803f4 <CAN0_Handler+0xd4>
			else if (message.data[0] == DOWN)
   803c0:	4a37      	ldr	r2, [pc, #220]	; (804a0 <CAN0_Handler+0x180>)
   803c2:	8892      	ldrh	r2, [r2, #4]
   803c4:	4293      	cmp	r3, r2
   803c6:	d01f      	beq.n	80408 <CAN0_Handler+0xe8>
			else if (message.data[0] == LEFT)
   803c8:	4a36      	ldr	r2, [pc, #216]	; (804a4 <CAN0_Handler+0x184>)
   803ca:	8812      	ldrh	r2, [r2, #0]
   803cc:	4293      	cmp	r3, r2
   803ce:	d025      	beq.n	8041c <CAN0_Handler+0xfc>
			else if (message.data[0] == RIGHT)
   803d0:	4a33      	ldr	r2, [pc, #204]	; (804a0 <CAN0_Handler+0x180>)
   803d2:	88d2      	ldrh	r2, [r2, #6]
   803d4:	4293      	cmp	r3, r2
   803d6:	d02b      	beq.n	80430 <CAN0_Handler+0x110>
			else if (message.data[0] == NEUTRAL)
   803d8:	4a31      	ldr	r2, [pc, #196]	; (804a0 <CAN0_Handler+0x180>)
   803da:	8912      	ldrh	r2, [r2, #8]
   803dc:	4293      	cmp	r3, r2
   803de:	d1b9      	bne.n	80354 <CAN0_Handler+0x34>
				printf("neutral %c\n",e);
   803e0:	4b2f      	ldr	r3, [pc, #188]	; (804a0 <CAN0_Handler+0x180>)
   803e2:	7899      	ldrb	r1, [r3, #2]
   803e4:	4830      	ldr	r0, [pc, #192]	; (804a8 <CAN0_Handler+0x188>)
   803e6:	4d29      	ldr	r5, [pc, #164]	; (8048c <CAN0_Handler+0x16c>)
   803e8:	47a8      	blx	r5
				printf("%c\n",message.data[0]);
   803ea:	f89d 1007 	ldrb.w	r1, [sp, #7]
   803ee:	482f      	ldr	r0, [pc, #188]	; (804ac <CAN0_Handler+0x18c>)
   803f0:	47a8      	blx	r5
   803f2:	e7af      	b.n	80354 <CAN0_Handler+0x34>
				printf("up %c\n",e);
   803f4:	4b2a      	ldr	r3, [pc, #168]	; (804a0 <CAN0_Handler+0x180>)
   803f6:	7899      	ldrb	r1, [r3, #2]
   803f8:	482d      	ldr	r0, [pc, #180]	; (804b0 <CAN0_Handler+0x190>)
   803fa:	4d24      	ldr	r5, [pc, #144]	; (8048c <CAN0_Handler+0x16c>)
   803fc:	47a8      	blx	r5
				printf("%c\n",message.data[0]);
   803fe:	f89d 1007 	ldrb.w	r1, [sp, #7]
   80402:	482a      	ldr	r0, [pc, #168]	; (804ac <CAN0_Handler+0x18c>)
   80404:	47a8      	blx	r5
   80406:	e7a5      	b.n	80354 <CAN0_Handler+0x34>
				printf("down %c\n",e);
   80408:	4b25      	ldr	r3, [pc, #148]	; (804a0 <CAN0_Handler+0x180>)
   8040a:	7899      	ldrb	r1, [r3, #2]
   8040c:	4829      	ldr	r0, [pc, #164]	; (804b4 <CAN0_Handler+0x194>)
   8040e:	4d1f      	ldr	r5, [pc, #124]	; (8048c <CAN0_Handler+0x16c>)
   80410:	47a8      	blx	r5
				printf("%c\n",message.data[0]);
   80412:	f89d 1007 	ldrb.w	r1, [sp, #7]
   80416:	4825      	ldr	r0, [pc, #148]	; (804ac <CAN0_Handler+0x18c>)
   80418:	47a8      	blx	r5
   8041a:	e79b      	b.n	80354 <CAN0_Handler+0x34>
				printf("left %c\n",e);
   8041c:	4b20      	ldr	r3, [pc, #128]	; (804a0 <CAN0_Handler+0x180>)
   8041e:	7899      	ldrb	r1, [r3, #2]
   80420:	4825      	ldr	r0, [pc, #148]	; (804b8 <CAN0_Handler+0x198>)
   80422:	4d1a      	ldr	r5, [pc, #104]	; (8048c <CAN0_Handler+0x16c>)
   80424:	47a8      	blx	r5
				printf("%c\n",message.data[0]);
   80426:	f89d 1007 	ldrb.w	r1, [sp, #7]
   8042a:	4820      	ldr	r0, [pc, #128]	; (804ac <CAN0_Handler+0x18c>)
   8042c:	47a8      	blx	r5
   8042e:	e791      	b.n	80354 <CAN0_Handler+0x34>
				printf("right %c\n",e);
   80430:	4b1b      	ldr	r3, [pc, #108]	; (804a0 <CAN0_Handler+0x180>)
   80432:	7899      	ldrb	r1, [r3, #2]
   80434:	4821      	ldr	r0, [pc, #132]	; (804bc <CAN0_Handler+0x19c>)
   80436:	4d15      	ldr	r5, [pc, #84]	; (8048c <CAN0_Handler+0x16c>)
   80438:	47a8      	blx	r5
				printf("%c\n",message.data[0]);
   8043a:	f89d 1007 	ldrb.w	r1, [sp, #7]
   8043e:	481b      	ldr	r0, [pc, #108]	; (804ac <CAN0_Handler+0x18c>)
   80440:	47a8      	blx	r5
   80442:	e787      	b.n	80354 <CAN0_Handler+0x34>
			motor_run_joystick(message.data[0]);
   80444:	f89d 0007 	ldrb.w	r0, [sp, #7]
   80448:	4b1d      	ldr	r3, [pc, #116]	; (804c0 <CAN0_Handler+0x1a0>)
   8044a:	4798      	blx	r3
			printf("x:%d    y%d\n",message.data[0],message.data[1]);
   8044c:	f89d 2008 	ldrb.w	r2, [sp, #8]
   80450:	f89d 1007 	ldrb.w	r1, [sp, #7]
   80454:	481b      	ldr	r0, [pc, #108]	; (804c4 <CAN0_Handler+0x1a4>)
   80456:	4b0d      	ldr	r3, [pc, #52]	; (8048c <CAN0_Handler+0x16c>)
   80458:	4798      	blx	r3
   8045a:	e77f      	b.n	8035c <CAN0_Handler+0x3c>
		for (int i = 0; i < message.data_length; i++)
   8045c:	3301      	adds	r3, #1
   8045e:	f89d 2006 	ldrb.w	r2, [sp, #6]
   80462:	4293      	cmp	r3, r2
   80464:	dbfa      	blt.n	8045c <CAN0_Handler+0x13c>
			if(DEBUG_INTERRUPT)printf("%d ", message.data[i]);
		}
		if(DEBUG_INTERRUPT)printf("\n\r");
	}
	
	if(can_sr & CAN_SR_MB0)
   80466:	f014 0f01 	tst.w	r4, #1
   8046a:	d002      	beq.n	80472 <CAN0_Handler+0x152>
	{
		if(DEBUG_INTERRUPT) printf("CAN0 MB0 ready to send \n\r");
		
	//Disable interrupt
		CAN0->CAN_IDR = CAN_IER_MB0;
   8046c:	2201      	movs	r2, #1
   8046e:	4b04      	ldr	r3, [pc, #16]	; (80480 <CAN0_Handler+0x160>)
   80470:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   80472:	f44f 6200 	mov.w	r2, #2048	; 0x800
   80476:	4b14      	ldr	r3, [pc, #80]	; (804c8 <CAN0_Handler+0x1a8>)
   80478:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184

	}
	
	NVIC_ClearPendingIRQ(ID_CAN0);
	//sei();*/
}
   8047c:	b004      	add	sp, #16
   8047e:	bd70      	pop	{r4, r5, r6, pc}
   80480:	400b4000 	.word	0x400b4000
   80484:	0008029d 	.word	0x0008029d
   80488:	00080d24 	.word	0x00080d24
   8048c:	00080a35 	.word	0x00080a35
   80490:	00080d50 	.word	0x00080d50
   80494:	00080d58 	.word	0x00080d58
   80498:	00080d60 	.word	0x00080d60
   8049c:	00080d6c 	.word	0x00080d6c
   804a0:	20000000 	.word	0x20000000
   804a4:	20000460 	.word	0x20000460
   804a8:	00080da4 	.word	0x00080da4
   804ac:	00080dac 	.word	0x00080dac
   804b0:	00080d78 	.word	0x00080d78
   804b4:	00080d80 	.word	0x00080d80
   804b8:	00080d8c 	.word	0x00080d8c
   804bc:	00080d98 	.word	0x00080d98
   804c0:	00080731 	.word	0x00080731
   804c4:	00080db0 	.word	0x00080db0
   804c8:	e000e100 	.word	0xe000e100

000804cc <dac_write>:

	dac_write(0);
}

void dac_write(uint16_t data) {
	DACC->DACC_CDR = data;
   804cc:	4b01      	ldr	r3, [pc, #4]	; (804d4 <dac_write+0x8>)
   804ce:	6218      	str	r0, [r3, #32]

	while (!DACC->DACC_ISR & DACC_ISR_EOC);
   804d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   804d2:	4770      	bx	lr
   804d4:	400c8000 	.word	0x400c8000

000804d8 <dac_init>:
void dac_init() {
   804d8:	b508      	push	{r3, lr}
	PMC->PMC_PCR = PMC_PCR_EN | PMC_PCR_DIV_PERIPH_DIV_MCK | (ID_DACC << PMC_PCR_PID_Pos);
   804da:	4b0a      	ldr	r3, [pc, #40]	; (80504 <dac_init+0x2c>)
   804dc:	4a0a      	ldr	r2, [pc, #40]	; (80508 <dac_init+0x30>)
   804de:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	PMC->PMC_PCER1 |= 1 << (ID_DACC - 32);
   804e2:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   804e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   804ea:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	DACC->DACC_MR = DACC_MR_USER_SEL_CHANNEL1 | DACC_MR_WORD_HALF | DACC_MR_STARTUP_0;
   804ee:	f5a3 33c3 	sub.w	r3, r3, #99840	; 0x18600
   804f2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   804f6:	605a      	str	r2, [r3, #4]
	DACC->DACC_CHER = DACC_CHER_CH1;
   804f8:	2202      	movs	r2, #2
   804fa:	611a      	str	r2, [r3, #16]
	dac_write(0);
   804fc:	2000      	movs	r0, #0
   804fe:	4b03      	ldr	r3, [pc, #12]	; (8050c <dac_init+0x34>)
   80500:	4798      	blx	r3
   80502:	bd08      	pop	{r3, pc}
   80504:	400e0600 	.word	0x400e0600
   80508:	10000026 	.word	0x10000026
   8050c:	000804cd 	.word	0x000804cd

00080510 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   80510:	e7fe      	b.n	80510 <Dummy_Handler>
	...

00080514 <Reset_Handler>:
{
   80514:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
   80516:	4b11      	ldr	r3, [pc, #68]	; (8055c <Reset_Handler+0x48>)
   80518:	4a11      	ldr	r2, [pc, #68]	; (80560 <Reset_Handler+0x4c>)
   8051a:	429a      	cmp	r2, r3
   8051c:	d009      	beq.n	80532 <Reset_Handler+0x1e>
   8051e:	4b0f      	ldr	r3, [pc, #60]	; (8055c <Reset_Handler+0x48>)
   80520:	4a0f      	ldr	r2, [pc, #60]	; (80560 <Reset_Handler+0x4c>)
   80522:	e003      	b.n	8052c <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
   80524:	6811      	ldr	r1, [r2, #0]
   80526:	6019      	str	r1, [r3, #0]
   80528:	3304      	adds	r3, #4
   8052a:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
   8052c:	490d      	ldr	r1, [pc, #52]	; (80564 <Reset_Handler+0x50>)
   8052e:	428b      	cmp	r3, r1
   80530:	d3f8      	bcc.n	80524 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
   80532:	4b0d      	ldr	r3, [pc, #52]	; (80568 <Reset_Handler+0x54>)
   80534:	e002      	b.n	8053c <Reset_Handler+0x28>
                *pDest++ = 0;
   80536:	2200      	movs	r2, #0
   80538:	601a      	str	r2, [r3, #0]
   8053a:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
   8053c:	4a0b      	ldr	r2, [pc, #44]	; (8056c <Reset_Handler+0x58>)
   8053e:	4293      	cmp	r3, r2
   80540:	d3f9      	bcc.n	80536 <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   80542:	4b0b      	ldr	r3, [pc, #44]	; (80570 <Reset_Handler+0x5c>)
   80544:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   80548:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   8054c:	4a09      	ldr	r2, [pc, #36]	; (80574 <Reset_Handler+0x60>)
   8054e:	6093      	str	r3, [r2, #8]
        __libc_init_array();
   80550:	4b09      	ldr	r3, [pc, #36]	; (80578 <Reset_Handler+0x64>)
   80552:	4798      	blx	r3
        main();
   80554:	4b09      	ldr	r3, [pc, #36]	; (8057c <Reset_Handler+0x68>)
   80556:	4798      	blx	r3
   80558:	e7fe      	b.n	80558 <Reset_Handler+0x44>
   8055a:	bf00      	nop
   8055c:	20000000 	.word	0x20000000
   80560:	00080e10 	.word	0x00080e10
   80564:	20000444 	.word	0x20000444
   80568:	20000444 	.word	0x20000444
   8056c:	200004d4 	.word	0x200004d4
   80570:	00080000 	.word	0x00080000
   80574:	e000ed00 	.word	0xe000ed00
   80578:	00080bb5 	.word	0x00080bb5
   8057c:	0008065d 	.word	0x0008065d

00080580 <SystemInit>:
 * Initialize the System and update the SystemFrequency variable.
 */
void SystemInit( void )
{
  /* Set FWS according to SYS_BOARD_MCKR configuration */
  EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   80580:	f44f 6380 	mov.w	r3, #1024	; 0x400
   80584:	4a20      	ldr	r2, [pc, #128]	; (80608 <SystemInit+0x88>)
   80586:	6013      	str	r3, [r2, #0]
  EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
   80588:	f502 7200 	add.w	r2, r2, #512	; 0x200
   8058c:	6013      	str	r3, [r2, #0]

  /* Initialize main oscillator */
  if ( !(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) )
   8058e:	4b1f      	ldr	r3, [pc, #124]	; (8060c <SystemInit+0x8c>)
   80590:	6a1b      	ldr	r3, [r3, #32]
   80592:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80596:	d107      	bne.n	805a8 <SystemInit+0x28>
  {
    PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
   80598:	4a1d      	ldr	r2, [pc, #116]	; (80610 <SystemInit+0x90>)
   8059a:	4b1c      	ldr	r3, [pc, #112]	; (8060c <SystemInit+0x8c>)
   8059c:	621a      	str	r2, [r3, #32]
    while ( !(PMC->PMC_SR & PMC_SR_MOSCXTS) )
   8059e:	4b1b      	ldr	r3, [pc, #108]	; (8060c <SystemInit+0x8c>)
   805a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   805a2:	f013 0f01 	tst.w	r3, #1
   805a6:	d0fa      	beq.n	8059e <SystemInit+0x1e>
    {
    }
  }

  /* Switch to 3-20MHz Xtal oscillator */
  PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;
   805a8:	4a1a      	ldr	r2, [pc, #104]	; (80614 <SystemInit+0x94>)
   805aa:	4b18      	ldr	r3, [pc, #96]	; (8060c <SystemInit+0x8c>)
   805ac:	621a      	str	r2, [r3, #32]

  while ( !(PMC->PMC_SR & PMC_SR_MOSCSELS) )
   805ae:	4b17      	ldr	r3, [pc, #92]	; (8060c <SystemInit+0x8c>)
   805b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   805b2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   805b6:	d0fa      	beq.n	805ae <SystemInit+0x2e>
  {
  }
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
   805b8:	4a14      	ldr	r2, [pc, #80]	; (8060c <SystemInit+0x8c>)
   805ba:	6b13      	ldr	r3, [r2, #48]	; 0x30
   805bc:	f023 0303 	bic.w	r3, r3, #3
   805c0:	f043 0301 	orr.w	r3, r3, #1
   805c4:	6313      	str	r3, [r2, #48]	; 0x30
  while (!(PMC->PMC_SR & PMC_SR_MCKRDY))
   805c6:	4b11      	ldr	r3, [pc, #68]	; (8060c <SystemInit+0x8c>)
   805c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   805ca:	f013 0f08 	tst.w	r3, #8
   805ce:	d0fa      	beq.n	805c6 <SystemInit+0x46>
  {
  }

  /* Initialize PLLA */
  PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
   805d0:	4a11      	ldr	r2, [pc, #68]	; (80618 <SystemInit+0x98>)
   805d2:	4b0e      	ldr	r3, [pc, #56]	; (8060c <SystemInit+0x8c>)
   805d4:	629a      	str	r2, [r3, #40]	; 0x28
  while ( !(PMC->PMC_SR & PMC_SR_LOCKA) )
   805d6:	4b0d      	ldr	r3, [pc, #52]	; (8060c <SystemInit+0x8c>)
   805d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   805da:	f013 0f02 	tst.w	r3, #2
   805de:	d0fa      	beq.n	805d6 <SystemInit+0x56>
  {
  }

  /* Switch to main clock */
  PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
   805e0:	2211      	movs	r2, #17
   805e2:	4b0a      	ldr	r3, [pc, #40]	; (8060c <SystemInit+0x8c>)
   805e4:	631a      	str	r2, [r3, #48]	; 0x30
  while ( !(PMC->PMC_SR & PMC_SR_MCKRDY) )
   805e6:	4b09      	ldr	r3, [pc, #36]	; (8060c <SystemInit+0x8c>)
   805e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   805ea:	f013 0f08 	tst.w	r3, #8
   805ee:	d0fa      	beq.n	805e6 <SystemInit+0x66>
  {
  }

  /* Switch to PLLA */
  PMC->PMC_MCKR = SYS_BOARD_MCKR;
   805f0:	2212      	movs	r2, #18
   805f2:	4b06      	ldr	r3, [pc, #24]	; (8060c <SystemInit+0x8c>)
   805f4:	631a      	str	r2, [r3, #48]	; 0x30
  while ( !(PMC->PMC_SR & PMC_SR_MCKRDY) )
   805f6:	4b05      	ldr	r3, [pc, #20]	; (8060c <SystemInit+0x8c>)
   805f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   805fa:	f013 0f08 	tst.w	r3, #8
   805fe:	d0fa      	beq.n	805f6 <SystemInit+0x76>
  {
  }

  SystemCoreClock = CHIP_FREQ_CPU_MAX;
   80600:	4a06      	ldr	r2, [pc, #24]	; (8061c <SystemInit+0x9c>)
   80602:	4b07      	ldr	r3, [pc, #28]	; (80620 <SystemInit+0xa0>)
   80604:	601a      	str	r2, [r3, #0]
   80606:	4770      	bx	lr
   80608:	400e0a00 	.word	0x400e0a00
   8060c:	400e0600 	.word	0x400e0600
   80610:	00370809 	.word	0x00370809
   80614:	01370809 	.word	0x01370809
   80618:	200d3f01 	.word	0x200d3f01
   8061c:	0501bd00 	.word	0x0501bd00
   80620:	2000000c 	.word	0x2000000c

00080624 <score_count>:

int counter = 0;
int lives = 3;
int pause = 0;

void score_count(void){
   80624:	b508      	push	{r3, lr}
	
	int IR_level = ADC_read();
   80626:	4b0a      	ldr	r3, [pc, #40]	; (80650 <score_count+0x2c>)
   80628:	4798      	blx	r3
	
	
	
	//sudo code
	if (IR_level == 0 && pause == 0)
   8062a:	b930      	cbnz	r0, 8063a <score_count+0x16>
   8062c:	4b09      	ldr	r3, [pc, #36]	; (80654 <score_count+0x30>)
   8062e:	681b      	ldr	r3, [r3, #0]
   80630:	b91b      	cbnz	r3, 8063a <score_count+0x16>
	{ 
		counter = 1;
   80632:	4b08      	ldr	r3, [pc, #32]	; (80654 <score_count+0x30>)
   80634:	2201      	movs	r2, #1
   80636:	605a      	str	r2, [r3, #4]
		pause = 1;
   80638:	601a      	str	r2, [r3, #0]
	}
	
	
	if (counter == lives)
   8063a:	4b06      	ldr	r3, [pc, #24]	; (80654 <score_count+0x30>)
   8063c:	685a      	ldr	r2, [r3, #4]
   8063e:	4b06      	ldr	r3, [pc, #24]	; (80658 <score_count+0x34>)
   80640:	681b      	ldr	r3, [r3, #0]
   80642:	429a      	cmp	r2, r3
   80644:	d000      	beq.n	80648 <score_count+0x24>
   80646:	bd08      	pop	{r3, pc}
	{
		//printf("Game over");
		counter = 0;
   80648:	2200      	movs	r2, #0
   8064a:	4b02      	ldr	r3, [pc, #8]	; (80654 <score_count+0x30>)
   8064c:	605a      	str	r2, [r3, #4]
	}
//printf("--------------------->%d\n", counter);



   8064e:	e7fa      	b.n	80646 <score_count+0x22>
   80650:	00080191 	.word	0x00080191
   80654:	20000464 	.word	0x20000464
   80658:	20000010 	.word	0x20000010

0008065c <main>:


//#include <util/delay.h>

int main(void)
{
   8065c:	b500      	push	{lr}
   8065e:	b083      	sub	sp, #12
    /* Initialize the SAM system */
	volatile char e = 'e'; //bug i printf 
   80660:	2365      	movs	r3, #101	; 0x65
   80662:	f88d 3007 	strb.w	r3, [sp, #7]
    
	SystemInit();
   80666:	4b11      	ldr	r3, [pc, #68]	; (806ac <main+0x50>)
   80668:	4798      	blx	r3
	WDT->WDT_MR = WDT_MR_WDDIS; //disable watchdog timer
   8066a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   8066e:	4b10      	ldr	r3, [pc, #64]	; (806b0 <main+0x54>)
   80670:	605a      	str	r2, [r3, #4]
	configure_uart();
   80672:	4b10      	ldr	r3, [pc, #64]	; (806b4 <main+0x58>)
   80674:	4798      	blx	r3
	can_init_def_tx_rx_mb(0x00290165);
   80676:	4810      	ldr	r0, [pc, #64]	; (806b8 <main+0x5c>)
   80678:	4b10      	ldr	r3, [pc, #64]	; (806bc <main+0x60>)
   8067a:	4798      	blx	r3
	PWM_init();
   8067c:	4b10      	ldr	r3, [pc, #64]	; (806c0 <main+0x64>)
   8067e:	4798      	blx	r3
	ADC_init();
   80680:	4b10      	ldr	r3, [pc, #64]	; (806c4 <main+0x68>)
   80682:	4798      	blx	r3
	dac_init();
   80684:	4b10      	ldr	r3, [pc, #64]	; (806c8 <main+0x6c>)
   80686:	4798      	blx	r3
	motor_init();
   80688:	4b10      	ldr	r3, [pc, #64]	; (806cc <main+0x70>)
   8068a:	4798      	blx	r3
	
	
	
	
	motor_disable();
   8068c:	4b10      	ldr	r3, [pc, #64]	; (806d0 <main+0x74>)
   8068e:	4798      	blx	r3
	motor_enable();
   80690:	4b10      	ldr	r3, [pc, #64]	; (806d4 <main+0x78>)
   80692:	4798      	blx	r3
	//set_servo_pos(1);
    /* Replace with your application code */
	//set_servo_pos(1);
    while (1) 
    {
	CAN0_Handler();	
   80694:	4b10      	ldr	r3, [pc, #64]	; (806d8 <main+0x7c>)
   80696:	4798      	blx	r3
	score_count();
   80698:	4b10      	ldr	r3, [pc, #64]	; (806dc <main+0x80>)
   8069a:	4798      	blx	r3
	//motor_run_joystick()
	
	if (ADC_read() == 0)
   8069c:	4b10      	ldr	r3, [pc, #64]	; (806e0 <main+0x84>)
   8069e:	4798      	blx	r3
   806a0:	2800      	cmp	r0, #0
   806a2:	d0f7      	beq.n	80694 <main+0x38>
	{
		//printf("FALS%c",e);
	}
	else if (ADC_read() == 1)
   806a4:	4b0e      	ldr	r3, [pc, #56]	; (806e0 <main+0x84>)
   806a6:	4798      	blx	r3
   806a8:	e7f4      	b.n	80694 <main+0x38>
   806aa:	bf00      	nop
   806ac:	00080581 	.word	0x00080581
   806b0:	400e1a50 	.word	0x400e1a50
   806b4:	00080ac1 	.word	0x00080ac1
   806b8:	00290165 	.word	0x00290165
   806bc:	0008028d 	.word	0x0008028d
   806c0:	00080a59 	.word	0x00080a59
   806c4:	00080161 	.word	0x00080161
   806c8:	000804d9 	.word	0x000804d9
   806cc:	000806e5 	.word	0x000806e5
   806d0:	00080779 	.word	0x00080779
   806d4:	00080795 	.word	0x00080795
   806d8:	00080321 	.word	0x00080321
   806dc:	00080625 	.word	0x00080625
   806e0:	00080191 	.word	0x00080191

000806e4 <motor_init>:
#include "sam.h"
#include "DAC.h"
#include "Motor.h"


void motor_init() {
   806e4:	b508      	push	{r3, lr}
	dac_init();
   806e6:	4b0f      	ldr	r3, [pc, #60]	; (80724 <motor_init+0x40>)
   806e8:	4798      	blx	r3

	// enable PIOD pins to motor box as output
	PIOD->PIO_PER |= PIO_PD10 | PIO_PD9 | PIO_PD2 | PIO_PD1 | PIO_PD0;
   806ea:	4b0f      	ldr	r3, [pc, #60]	; (80728 <motor_init+0x44>)
   806ec:	6819      	ldr	r1, [r3, #0]
   806ee:	f240 6007 	movw	r0, #1543	; 0x607
   806f2:	4301      	orrs	r1, r0
   806f4:	6019      	str	r1, [r3, #0]
	PIOD->PIO_OER |= PIO_PD10 | PIO_PD9 | PIO_PD2 | PIO_PD1 | PIO_PD0;
   806f6:	691a      	ldr	r2, [r3, #16]
   806f8:	4302      	orrs	r2, r0
   806fa:	611a      	str	r2, [r3, #16]

	// enable PIOC pins from motor encoder as input
	PIOC->PIO_PER |= (0xFF << 1);
   806fc:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
   80700:	681a      	ldr	r2, [r3, #0]
   80702:	f442 72ff 	orr.w	r2, r2, #510	; 0x1fe
   80706:	601a      	str	r2, [r3, #0]
	PIOC->PIO_ODR |= (0xFF << 1);
   80708:	695a      	ldr	r2, [r3, #20]
   8070a:	f442 72ff 	orr.w	r2, r2, #510	; 0x1fe
   8070e:	615a      	str	r2, [r3, #20]

	// enable PIOC clock
	PMC->PMC_PCR = PMC_PCR_EN | PMC_PCR_DIV_PERIPH_DIV_MCK | (ID_PIOC << PMC_PCR_PID_Pos);
   80710:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
   80714:	4a05      	ldr	r2, [pc, #20]	; (8072c <motor_init+0x48>)
   80716:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	PMC->PMC_PCER0 |= 1 << (ID_PIOC);
   8071a:	691a      	ldr	r2, [r3, #16]
   8071c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   80720:	611a      	str	r2, [r3, #16]
   80722:	bd08      	pop	{r3, pc}
   80724:	000804d9 	.word	0x000804d9
   80728:	400e1400 	.word	0x400e1400
   8072c:	1000000d 	.word	0x1000000d

00080730 <motor_run_joystick>:
}


void motor_run_joystick(int joystick_value) {
   80730:	b508      	push	{r3, lr}
	if (joystick_value > 95) {
   80732:	285f      	cmp	r0, #95	; 0x5f
   80734:	dc14      	bgt.n	80760 <motor_run_joystick+0x30>
		//motor_set_direction(RIGHT);
		 PIOD->PIO_SODR = PIO_PD10;
	}
	else {
		//motor_set_direction(LEFT);
		PIOD->PIO_CODR = PIO_PD10;
   80736:	f44f 6280 	mov.w	r2, #1024	; 0x400
   8073a:	4b0c      	ldr	r3, [pc, #48]	; (8076c <motor_run_joystick+0x3c>)
   8073c:	635a      	str	r2, [r3, #52]	; 0x34
	}

	uint16_t speed = (uint16_t) (0x4FF * abs(joystick_value) / 100);
   8073e:	2800      	cmp	r0, #0
   80740:	bfb8      	it	lt
   80742:	4240      	neglt	r0, r0
   80744:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   80748:	ebc0 2003 	rsb	r0, r0, r3, lsl #8
   8074c:	4b08      	ldr	r3, [pc, #32]	; (80770 <motor_run_joystick+0x40>)
   8074e:	fb83 2300 	smull	r2, r3, r3, r0
   80752:	17c0      	asrs	r0, r0, #31
   80754:	ebc0 1063 	rsb	r0, r0, r3, asr #5
	//motor_set_speed(speed);
	dac_write(speed); 
   80758:	b280      	uxth	r0, r0
   8075a:	4b06      	ldr	r3, [pc, #24]	; (80774 <motor_run_joystick+0x44>)
   8075c:	4798      	blx	r3
   8075e:	bd08      	pop	{r3, pc}
		 PIOD->PIO_SODR = PIO_PD10;
   80760:	f44f 6280 	mov.w	r2, #1024	; 0x400
   80764:	4b01      	ldr	r3, [pc, #4]	; (8076c <motor_run_joystick+0x3c>)
   80766:	631a      	str	r2, [r3, #48]	; 0x30
   80768:	e7e9      	b.n	8073e <motor_run_joystick+0xe>
   8076a:	bf00      	nop
   8076c:	400e1400 	.word	0x400e1400
   80770:	51eb851f 	.word	0x51eb851f
   80774:	000804cd 	.word	0x000804cd

00080778 <motor_disable>:
}

void motor_disable() {
   80778:	b508      	push	{r3, lr}
	//motor_set_speed(0);
	dac_write(0);
   8077a:	2000      	movs	r0, #0
   8077c:	4b03      	ldr	r3, [pc, #12]	; (8078c <motor_disable+0x14>)
   8077e:	4798      	blx	r3
	PIOD->PIO_CODR = PIO_PD9;
   80780:	f44f 7200 	mov.w	r2, #512	; 0x200
   80784:	4b02      	ldr	r3, [pc, #8]	; (80790 <motor_disable+0x18>)
   80786:	635a      	str	r2, [r3, #52]	; 0x34
   80788:	bd08      	pop	{r3, pc}
   8078a:	bf00      	nop
   8078c:	000804cd 	.word	0x000804cd
   80790:	400e1400 	.word	0x400e1400

00080794 <motor_enable>:
}

void motor_enable() {
	PIOD->PIO_SODR = PIO_PD9;
   80794:	f44f 7200 	mov.w	r2, #512	; 0x200
   80798:	4b01      	ldr	r3, [pc, #4]	; (807a0 <motor_enable+0xc>)
   8079a:	631a      	str	r2, [r3, #48]	; 0x30
   8079c:	4770      	bx	lr
   8079e:	bf00      	nop
   807a0:	400e1400 	.word	0x400e1400

000807a4 <printchar>:
#include "uart.h"


//insert function to print to here
static void printchar(char **str, int c)
{
   807a4:	b508      	push	{r3, lr}
	(void) uart_putchar(c);  //Send characters to uart
   807a6:	b2c8      	uxtb	r0, r1
   807a8:	4b01      	ldr	r3, [pc, #4]	; (807b0 <printchar+0xc>)
   807aa:	4798      	blx	r3
   807ac:	bd08      	pop	{r3, pc}
   807ae:	bf00      	nop
   807b0:	00080b29 	.word	0x00080b29

000807b4 <prints>:

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
   807b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   807b8:	4607      	mov	r7, r0
   807ba:	460e      	mov	r6, r1
	register int pc = 0, padchar = ' ';

	if (width > 0) {
   807bc:	1e15      	subs	r5, r2, #0
   807be:	dd02      	ble.n	807c6 <prints+0x12>
   807c0:	460a      	mov	r2, r1
   807c2:	2100      	movs	r1, #0
   807c4:	e004      	b.n	807d0 <prints+0x1c>
	register int pc = 0, padchar = ' ';
   807c6:	f04f 0820 	mov.w	r8, #32
   807ca:	e00e      	b.n	807ea <prints+0x36>
		register int len = 0;
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
   807cc:	3101      	adds	r1, #1
   807ce:	3201      	adds	r2, #1
   807d0:	7810      	ldrb	r0, [r2, #0]
   807d2:	2800      	cmp	r0, #0
   807d4:	d1fa      	bne.n	807cc <prints+0x18>
		if (len >= width) width = 0;
   807d6:	42a9      	cmp	r1, r5
   807d8:	da01      	bge.n	807de <prints+0x2a>
		else width -= len;
   807da:	1a6d      	subs	r5, r5, r1
   807dc:	e000      	b.n	807e0 <prints+0x2c>
		if (len >= width) width = 0;
   807de:	2500      	movs	r5, #0
		if (pad & PAD_ZERO) padchar = '0';
   807e0:	f013 0f02 	tst.w	r3, #2
   807e4:	d106      	bne.n	807f4 <prints+0x40>
	register int pc = 0, padchar = ' ';
   807e6:	f04f 0820 	mov.w	r8, #32
	}
	if (!(pad & PAD_RIGHT)) {
   807ea:	f013 0401 	ands.w	r4, r3, #1
   807ee:	d00a      	beq.n	80806 <prints+0x52>
	register int pc = 0, padchar = ' ';
   807f0:	2400      	movs	r4, #0
   807f2:	e010      	b.n	80816 <prints+0x62>
		if (pad & PAD_ZERO) padchar = '0';
   807f4:	f04f 0830 	mov.w	r8, #48	; 0x30
   807f8:	e7f7      	b.n	807ea <prints+0x36>
		for ( ; width > 0; --width) {
			printchar (out, padchar);
   807fa:	4641      	mov	r1, r8
   807fc:	4638      	mov	r0, r7
   807fe:	4b0d      	ldr	r3, [pc, #52]	; (80834 <prints+0x80>)
   80800:	4798      	blx	r3
			++pc;
   80802:	3401      	adds	r4, #1
		for ( ; width > 0; --width) {
   80804:	3d01      	subs	r5, #1
   80806:	2d00      	cmp	r5, #0
   80808:	dcf7      	bgt.n	807fa <prints+0x46>
   8080a:	e004      	b.n	80816 <prints+0x62>
		}
	}
	for ( ; *string ; ++string) {
		printchar (out, *string);
   8080c:	4638      	mov	r0, r7
   8080e:	4b09      	ldr	r3, [pc, #36]	; (80834 <prints+0x80>)
   80810:	4798      	blx	r3
		++pc;
   80812:	3401      	adds	r4, #1
	for ( ; *string ; ++string) {
   80814:	3601      	adds	r6, #1
   80816:	7831      	ldrb	r1, [r6, #0]
   80818:	2900      	cmp	r1, #0
   8081a:	d1f7      	bne.n	8080c <prints+0x58>
   8081c:	e005      	b.n	8082a <prints+0x76>
	}
	for ( ; width > 0; --width) {
		printchar (out, padchar);
   8081e:	4641      	mov	r1, r8
   80820:	4638      	mov	r0, r7
   80822:	4b04      	ldr	r3, [pc, #16]	; (80834 <prints+0x80>)
   80824:	4798      	blx	r3
		++pc;
   80826:	3401      	adds	r4, #1
	for ( ; width > 0; --width) {
   80828:	3d01      	subs	r5, #1
   8082a:	2d00      	cmp	r5, #0
   8082c:	dcf7      	bgt.n	8081e <prints+0x6a>
	}

	return pc;
}
   8082e:	4620      	mov	r0, r4
   80830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80834:	000807a5 	.word	0x000807a5

00080838 <printi>:

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
   80838:	b5f0      	push	{r4, r5, r6, r7, lr}
   8083a:	b085      	sub	sp, #20
   8083c:	4607      	mov	r7, r0
   8083e:	980c      	ldr	r0, [sp, #48]	; 0x30
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
	register unsigned int u = i;

	if (i == 0) {
   80840:	b151      	cbz	r1, 80858 <printi+0x20>
   80842:	461e      	mov	r6, r3
   80844:	460c      	mov	r4, r1
		print_buf[0] = '0';
		print_buf[1] = '\0';
		return prints (out, print_buf, width, pad);
	}

	if (sg && b == 10 && i < 0) {
   80846:	b113      	cbz	r3, 8084e <printi+0x16>
   80848:	2a0a      	cmp	r2, #10
   8084a:	d012      	beq.n	80872 <printi+0x3a>
	register int t, neg = 0, pc = 0;
   8084c:	2600      	movs	r6, #0
		neg = 1;
		u = -i;
	}

	s = print_buf + PRINT_BUF_LEN-1;
	*s = '\0';
   8084e:	ad04      	add	r5, sp, #16
   80850:	2300      	movs	r3, #0
   80852:	f805 3d01 	strb.w	r3, [r5, #-1]!

	while (u) {
   80856:	e018      	b.n	8088a <printi+0x52>
		print_buf[0] = '0';
   80858:	2330      	movs	r3, #48	; 0x30
   8085a:	f88d 3004 	strb.w	r3, [sp, #4]
		print_buf[1] = '\0';
   8085e:	2300      	movs	r3, #0
   80860:	f88d 3005 	strb.w	r3, [sp, #5]
		return prints (out, print_buf, width, pad);
   80864:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   80866:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   80868:	a901      	add	r1, sp, #4
   8086a:	4638      	mov	r0, r7
   8086c:	4c1b      	ldr	r4, [pc, #108]	; (808dc <printi+0xa4>)
   8086e:	47a0      	blx	r4
   80870:	e029      	b.n	808c6 <printi+0x8e>
	if (sg && b == 10 && i < 0) {
   80872:	2900      	cmp	r1, #0
   80874:	db01      	blt.n	8087a <printi+0x42>
	register int t, neg = 0, pc = 0;
   80876:	2600      	movs	r6, #0
   80878:	e7e9      	b.n	8084e <printi+0x16>
		u = -i;
   8087a:	424c      	negs	r4, r1
		neg = 1;
   8087c:	2601      	movs	r6, #1
   8087e:	e7e6      	b.n	8084e <printi+0x16>
		t = u % b;
		if( t >= 10 )
			t += letbase - '0' - 10;
		*--s = t + '0';
   80880:	3330      	adds	r3, #48	; 0x30
   80882:	f805 3d01 	strb.w	r3, [r5, #-1]!
		u /= b;
   80886:	fbb4 f4f2 	udiv	r4, r4, r2
	while (u) {
   8088a:	b14c      	cbz	r4, 808a0 <printi+0x68>
		t = u % b;
   8088c:	fbb4 f3f2 	udiv	r3, r4, r2
   80890:	fb02 4313 	mls	r3, r2, r3, r4
		if( t >= 10 )
   80894:	2b09      	cmp	r3, #9
   80896:	ddf3      	ble.n	80880 <printi+0x48>
			t += letbase - '0' - 10;
   80898:	f1a0 013a 	sub.w	r1, r0, #58	; 0x3a
   8089c:	440b      	add	r3, r1
   8089e:	e7ef      	b.n	80880 <printi+0x48>
	}

	if (neg) {
   808a0:	b156      	cbz	r6, 808b8 <printi+0x80>
		if( width && (pad & PAD_ZERO) ) {
   808a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   808a4:	b11b      	cbz	r3, 808ae <printi+0x76>
   808a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   808a8:	f013 0f02 	tst.w	r3, #2
   808ac:	d10d      	bne.n	808ca <printi+0x92>
			printchar (out, '-');
			++pc;
			--width;
		}
		else {
			*--s = '-';
   808ae:	232d      	movs	r3, #45	; 0x2d
   808b0:	f805 3c01 	strb.w	r3, [r5, #-1]
   808b4:	3d01      	subs	r5, #1
	register int t, neg = 0, pc = 0;
   808b6:	2600      	movs	r6, #0
		}
	}

	return pc + prints (out, s, width, pad);
   808b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   808ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   808bc:	4629      	mov	r1, r5
   808be:	4638      	mov	r0, r7
   808c0:	4c06      	ldr	r4, [pc, #24]	; (808dc <printi+0xa4>)
   808c2:	47a0      	blx	r4
   808c4:	4430      	add	r0, r6
}
   808c6:	b005      	add	sp, #20
   808c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			printchar (out, '-');
   808ca:	212d      	movs	r1, #45	; 0x2d
   808cc:	4638      	mov	r0, r7
   808ce:	4b04      	ldr	r3, [pc, #16]	; (808e0 <printi+0xa8>)
   808d0:	4798      	blx	r3
			--width;
   808d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   808d4:	3b01      	subs	r3, #1
   808d6:	930a      	str	r3, [sp, #40]	; 0x28
   808d8:	e7ee      	b.n	808b8 <printi+0x80>
   808da:	bf00      	nop
   808dc:	000807b5 	.word	0x000807b5
   808e0:	000807a5 	.word	0x000807a5

000808e4 <print>:

static int print( char **out, const char *format, va_list args )
{
   808e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   808e6:	b089      	sub	sp, #36	; 0x24
   808e8:	4606      	mov	r6, r0
   808ea:	460c      	mov	r4, r1
   808ec:	9205      	str	r2, [sp, #20]
	register int width, pad;
	register int pc = 0;
   808ee:	2500      	movs	r5, #0
	char scr[2];

	for (; *format != 0; ++format) {
   808f0:	e081      	b.n	809f6 <print+0x112>
			++format;
			width = pad = 0;
			if (*format == '\0') break;
			if (*format == '%') goto out;
			if (*format == '-') {
				++format;
   808f2:	1ca2      	adds	r2, r4, #2
				pad = PAD_RIGHT;
   808f4:	2301      	movs	r3, #1
   808f6:	e08b      	b.n	80a10 <print+0x12c>
			}
			while (*format == '0') {
				++format;
   808f8:	3401      	adds	r4, #1
				pad |= PAD_ZERO;
   808fa:	f043 0302 	orr.w	r3, r3, #2
			while (*format == '0') {
   808fe:	7822      	ldrb	r2, [r4, #0]
   80900:	2a30      	cmp	r2, #48	; 0x30
   80902:	d0f9      	beq.n	808f8 <print+0x14>
   80904:	2200      	movs	r2, #0
   80906:	e006      	b.n	80916 <print+0x32>
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
				width *= 10;
   80908:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   8090c:	0050      	lsls	r0, r2, #1
				width += *format - '0';
   8090e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   80912:	4402      	add	r2, r0
			for ( ; *format >= '0' && *format <= '9'; ++format) {
   80914:	3401      	adds	r4, #1
   80916:	7821      	ldrb	r1, [r4, #0]
   80918:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
   8091c:	b2c0      	uxtb	r0, r0
   8091e:	2809      	cmp	r0, #9
   80920:	d9f2      	bls.n	80908 <print+0x24>
			}
			if( *format == 's' ) {
   80922:	2973      	cmp	r1, #115	; 0x73
   80924:	d018      	beq.n	80958 <print+0x74>
				register char *s = (char *)va_arg( args, int );
				pc += prints (out, s?s:"(null)", width, pad);
				continue;
			}
			if( *format == 'd' ) {
   80926:	2964      	cmp	r1, #100	; 0x64
   80928:	d022      	beq.n	80970 <print+0x8c>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
				continue;
			}
			if( *format == 'x' ) {
   8092a:	2978      	cmp	r1, #120	; 0x78
   8092c:	d02f      	beq.n	8098e <print+0xaa>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
				continue;
			}
			if( *format == 'X' ) {
   8092e:	2958      	cmp	r1, #88	; 0x58
   80930:	d03c      	beq.n	809ac <print+0xc8>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
				continue;
			}
			if( *format == 'u' ) {
   80932:	2975      	cmp	r1, #117	; 0x75
   80934:	d049      	beq.n	809ca <print+0xe6>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
				continue;
			}
			if( *format == 'c' ) {
   80936:	2963      	cmp	r1, #99	; 0x63
   80938:	d15c      	bne.n	809f4 <print+0x110>
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
   8093a:	9905      	ldr	r1, [sp, #20]
   8093c:	1d08      	adds	r0, r1, #4
   8093e:	9005      	str	r0, [sp, #20]
   80940:	7809      	ldrb	r1, [r1, #0]
   80942:	f88d 101c 	strb.w	r1, [sp, #28]
				scr[1] = '\0';
   80946:	2100      	movs	r1, #0
   80948:	f88d 101d 	strb.w	r1, [sp, #29]
				pc += prints (out, scr, width, pad);
   8094c:	a907      	add	r1, sp, #28
   8094e:	4630      	mov	r0, r6
   80950:	4f34      	ldr	r7, [pc, #208]	; (80a24 <print+0x140>)
   80952:	47b8      	blx	r7
   80954:	4405      	add	r5, r0
				continue;
   80956:	e04d      	b.n	809f4 <print+0x110>
				register char *s = (char *)va_arg( args, int );
   80958:	9905      	ldr	r1, [sp, #20]
   8095a:	1d08      	adds	r0, r1, #4
   8095c:	9005      	str	r0, [sp, #20]
   8095e:	6809      	ldr	r1, [r1, #0]
				pc += prints (out, s?s:"(null)", width, pad);
   80960:	b121      	cbz	r1, 8096c <print+0x88>
   80962:	4630      	mov	r0, r6
   80964:	4f2f      	ldr	r7, [pc, #188]	; (80a24 <print+0x140>)
   80966:	47b8      	blx	r7
   80968:	4405      	add	r5, r0
				continue;
   8096a:	e043      	b.n	809f4 <print+0x110>
				pc += prints (out, s?s:"(null)", width, pad);
   8096c:	492e      	ldr	r1, [pc, #184]	; (80a28 <print+0x144>)
   8096e:	e7f8      	b.n	80962 <print+0x7e>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
   80970:	9905      	ldr	r1, [sp, #20]
   80972:	1d08      	adds	r0, r1, #4
   80974:	9005      	str	r0, [sp, #20]
   80976:	6809      	ldr	r1, [r1, #0]
   80978:	2061      	movs	r0, #97	; 0x61
   8097a:	9002      	str	r0, [sp, #8]
   8097c:	9301      	str	r3, [sp, #4]
   8097e:	9200      	str	r2, [sp, #0]
   80980:	2301      	movs	r3, #1
   80982:	220a      	movs	r2, #10
   80984:	4630      	mov	r0, r6
   80986:	4f29      	ldr	r7, [pc, #164]	; (80a2c <print+0x148>)
   80988:	47b8      	blx	r7
   8098a:	4405      	add	r5, r0
				continue;
   8098c:	e032      	b.n	809f4 <print+0x110>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
   8098e:	9905      	ldr	r1, [sp, #20]
   80990:	1d08      	adds	r0, r1, #4
   80992:	9005      	str	r0, [sp, #20]
   80994:	6809      	ldr	r1, [r1, #0]
   80996:	2061      	movs	r0, #97	; 0x61
   80998:	9002      	str	r0, [sp, #8]
   8099a:	9301      	str	r3, [sp, #4]
   8099c:	9200      	str	r2, [sp, #0]
   8099e:	2300      	movs	r3, #0
   809a0:	2210      	movs	r2, #16
   809a2:	4630      	mov	r0, r6
   809a4:	4f21      	ldr	r7, [pc, #132]	; (80a2c <print+0x148>)
   809a6:	47b8      	blx	r7
   809a8:	4405      	add	r5, r0
				continue;
   809aa:	e023      	b.n	809f4 <print+0x110>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
   809ac:	9905      	ldr	r1, [sp, #20]
   809ae:	1d08      	adds	r0, r1, #4
   809b0:	9005      	str	r0, [sp, #20]
   809b2:	6809      	ldr	r1, [r1, #0]
   809b4:	2041      	movs	r0, #65	; 0x41
   809b6:	9002      	str	r0, [sp, #8]
   809b8:	9301      	str	r3, [sp, #4]
   809ba:	9200      	str	r2, [sp, #0]
   809bc:	2300      	movs	r3, #0
   809be:	2210      	movs	r2, #16
   809c0:	4630      	mov	r0, r6
   809c2:	4f1a      	ldr	r7, [pc, #104]	; (80a2c <print+0x148>)
   809c4:	47b8      	blx	r7
   809c6:	4405      	add	r5, r0
				continue;
   809c8:	e014      	b.n	809f4 <print+0x110>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
   809ca:	9905      	ldr	r1, [sp, #20]
   809cc:	1d08      	adds	r0, r1, #4
   809ce:	9005      	str	r0, [sp, #20]
   809d0:	6809      	ldr	r1, [r1, #0]
   809d2:	2061      	movs	r0, #97	; 0x61
   809d4:	9002      	str	r0, [sp, #8]
   809d6:	9301      	str	r3, [sp, #4]
   809d8:	9200      	str	r2, [sp, #0]
   809da:	2300      	movs	r3, #0
   809dc:	220a      	movs	r2, #10
   809de:	4630      	mov	r0, r6
   809e0:	4f12      	ldr	r7, [pc, #72]	; (80a2c <print+0x148>)
   809e2:	47b8      	blx	r7
   809e4:	4405      	add	r5, r0
				continue;
   809e6:	e005      	b.n	809f4 <print+0x110>
			++format;
   809e8:	4614      	mov	r4, r2
			}
		}
		else {
		out:
			printchar (out, *format);
   809ea:	7821      	ldrb	r1, [r4, #0]
   809ec:	4630      	mov	r0, r6
   809ee:	4b10      	ldr	r3, [pc, #64]	; (80a30 <print+0x14c>)
   809f0:	4798      	blx	r3
			++pc;
   809f2:	3501      	adds	r5, #1
	for (; *format != 0; ++format) {
   809f4:	3401      	adds	r4, #1
   809f6:	7823      	ldrb	r3, [r4, #0]
   809f8:	b163      	cbz	r3, 80a14 <print+0x130>
		if (*format == '%') {
   809fa:	2b25      	cmp	r3, #37	; 0x25
   809fc:	d1f5      	bne.n	809ea <print+0x106>
			++format;
   809fe:	1c62      	adds	r2, r4, #1
			if (*format == '\0') break;
   80a00:	7863      	ldrb	r3, [r4, #1]
   80a02:	b13b      	cbz	r3, 80a14 <print+0x130>
			if (*format == '%') goto out;
   80a04:	2b25      	cmp	r3, #37	; 0x25
   80a06:	d0ef      	beq.n	809e8 <print+0x104>
			if (*format == '-') {
   80a08:	2b2d      	cmp	r3, #45	; 0x2d
   80a0a:	f43f af72 	beq.w	808f2 <print+0xe>
			width = pad = 0;
   80a0e:	2300      	movs	r3, #0
   80a10:	4614      	mov	r4, r2
   80a12:	e774      	b.n	808fe <print+0x1a>
		}
	}
	if (out) **out = '\0';
   80a14:	b116      	cbz	r6, 80a1c <print+0x138>
   80a16:	6833      	ldr	r3, [r6, #0]
   80a18:	2200      	movs	r2, #0
   80a1a:	701a      	strb	r2, [r3, #0]
	va_end( args );
	return pc;
}
   80a1c:	4628      	mov	r0, r5
   80a1e:	b009      	add	sp, #36	; 0x24
   80a20:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80a22:	bf00      	nop
   80a24:	000807b5 	.word	0x000807b5
   80a28:	00080dc0 	.word	0x00080dc0
   80a2c:	00080839 	.word	0x00080839
   80a30:	000807a5 	.word	0x000807a5

00080a34 <printf>:

int printf(const char *format, ...)
{
   80a34:	b40f      	push	{r0, r1, r2, r3}
   80a36:	b500      	push	{lr}
   80a38:	b083      	sub	sp, #12
   80a3a:	aa04      	add	r2, sp, #16
   80a3c:	f852 1b04 	ldr.w	r1, [r2], #4
        va_list args;
        
        va_start( args, format );
   80a40:	9201      	str	r2, [sp, #4]
        return print( 0, format, args );
   80a42:	2000      	movs	r0, #0
   80a44:	4b03      	ldr	r3, [pc, #12]	; (80a54 <printf+0x20>)
   80a46:	4798      	blx	r3
}
   80a48:	b003      	add	sp, #12
   80a4a:	f85d eb04 	ldr.w	lr, [sp], #4
   80a4e:	b004      	add	sp, #16
   80a50:	4770      	bx	lr
   80a52:	bf00      	nop
   80a54:	000808e5 	.word	0x000808e5

00080a58 <PWM_init>:
 */ 
#include "sam.h"
#include "PWM.h"

void PWM_init(void){
	PMC->PMC_PCER1 |= PMC_PCER1_PID36;
   80a58:	4a15      	ldr	r2, [pc, #84]	; (80ab0 <PWM_init+0x58>)
   80a5a:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
   80a5e:	f043 0310 	orr.w	r3, r3, #16
   80a62:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
	
	PIOC->PIO_OER |= PIO_PC19;
   80a66:	4b13      	ldr	r3, [pc, #76]	; (80ab4 <PWM_init+0x5c>)
   80a68:	691a      	ldr	r2, [r3, #16]
   80a6a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   80a6e:	611a      	str	r2, [r3, #16]
	PIOC->PIO_PDR |= PIO_PC19;
   80a70:	685a      	ldr	r2, [r3, #4]
   80a72:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   80a76:	605a      	str	r2, [r3, #4]
	PIOC->PIO_ABSR |= PIO_ABSR_P19;
   80a78:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   80a7a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   80a7e:	671a      	str	r2, [r3, #112]	; 0x70
	
	PWM->PWM_WPCR &= ~PIO_WPMR_WPEN;
   80a80:	4a0d      	ldr	r2, [pc, #52]	; (80ab8 <PWM_init+0x60>)
   80a82:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
   80a86:	f023 0301 	bic.w	r3, r3, #1
   80a8a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
	REG_PWM_CMR5 = PWM_CMR_CPRE_MCK_DIV_1024 | PWM_CMR_CPOL;
   80a8e:	f240 220a 	movw	r2, #522	; 0x20a
   80a92:	4b0a      	ldr	r3, [pc, #40]	; (80abc <PWM_init+0x64>)
   80a94:	601a      	str	r2, [r3, #0]
	REG_PWM_CPRD5 = 1640;
   80a96:	f44f 62cd 	mov.w	r2, #1640	; 0x668
   80a9a:	330c      	adds	r3, #12
   80a9c:	601a      	str	r2, [r3, #0]
	REG_PWM_CDTY5 = 123;
   80a9e:	227b      	movs	r2, #123	; 0x7b
   80aa0:	3b08      	subs	r3, #8
   80aa2:	601a      	str	r2, [r3, #0]
	REG_PWM_ENA = PWM_ENA_CHID5;
   80aa4:	2220      	movs	r2, #32
   80aa6:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
   80aaa:	601a      	str	r2, [r3, #0]
   80aac:	4770      	bx	lr
   80aae:	bf00      	nop
   80ab0:	400e0600 	.word	0x400e0600
   80ab4:	400e1200 	.word	0x400e1200
   80ab8:	40094000 	.word	0x40094000
   80abc:	400942a0 	.word	0x400942a0

00080ac0 <configure_uart>:
	uint32_t ul_sr;

/*
Initialize UART ring buffer as empty
*/
rx_buffer.head=0;
   80ac0:	4b16      	ldr	r3, [pc, #88]	; (80b1c <configure_uart+0x5c>)
   80ac2:	2200      	movs	r2, #0
   80ac4:	701a      	strb	r2, [r3, #0]
rx_buffer.tail=0;
   80ac6:	705a      	strb	r2, [r3, #1]
/*
Initialize UART communication
*/
	// Pin configuration
	// Disable interrupts on Uart receive (URXD) and transmit (UTXD) pins
	PIOA->PIO_IDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80ac8:	4b15      	ldr	r3, [pc, #84]	; (80b20 <configure_uart+0x60>)
   80aca:	f44f 7140 	mov.w	r1, #768	; 0x300
   80ace:	6459      	str	r1, [r3, #68]	; 0x44

	// Disable the Parallel IO (PIO) of the URXD and UTXD pins so that the peripheral controller can use them
	PIOA->PIO_PDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80ad0:	6059      	str	r1, [r3, #4]

	// Read current peripheral AB select register and set the UTXD and URXD pins to 0 (UART is connected as peripheral A)
	ul_sr = PIOA->PIO_ABSR;
   80ad2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
	PIOA->PIO_ABSR &= ~(PIO_PA8A_URXD | PIO_PA9A_UTXD) & ul_sr;
   80ad4:	6f18      	ldr	r0, [r3, #112]	; 0x70
   80ad6:	4002      	ands	r2, r0
   80ad8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   80adc:	671a      	str	r2, [r3, #112]	; 0x70

	// Enable pull up resistor on URXD and UTXD pin
	PIOA->PIO_PUER = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80ade:	6659      	str	r1, [r3, #100]	; 0x64

	// Uart configuration
	
	// Enable the peripheral UART controller in Power Management Controller (PMC)
	PMC->PMC_PCER0 = 1 << ID_UART;
   80ae0:	f44f 7280 	mov.w	r2, #256	; 0x100
   80ae4:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   80ae8:	611a      	str	r2, [r3, #16]

	// Reset and disable receiver and transmitter
	UART->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX | UART_CR_RXDIS | UART_CR_TXDIS;
   80aea:	f503 7300 	add.w	r3, r3, #512	; 0x200
   80aee:	21ac      	movs	r1, #172	; 0xac
   80af0:	6019      	str	r1, [r3, #0]

	// Set the baudrate
	UART->UART_BRGR = 547; // MCK / 16 * x = BaudRate (write x into UART_BRGR)  
   80af2:	f240 2123 	movw	r1, #547	; 0x223
   80af6:	6219      	str	r1, [r3, #32]

	// No parity bits
	UART->UART_MR = UART_MR_PAR_NO | UART_MR_CHMODE_NORMAL;	
   80af8:	f44f 6100 	mov.w	r1, #2048	; 0x800
   80afc:	6059      	str	r1, [r3, #4]

	// Disable PDC channel
	UART->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   80afe:	f240 2102 	movw	r1, #514	; 0x202
   80b02:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120

	// Configure interrupts on receive ready and errors
	UART->UART_IDR = 0xFFFFFFFF;
   80b06:	f04f 31ff 	mov.w	r1, #4294967295
   80b0a:	60d9      	str	r1, [r3, #12]
	UART->UART_IER = UART_IER_RXRDY | UART_IER_OVRE | UART_IER_FRAME | UART_IER_PARE;
   80b0c:	21e1      	movs	r1, #225	; 0xe1
   80b0e:	6099      	str	r1, [r3, #8]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   80b10:	4904      	ldr	r1, [pc, #16]	; (80b24 <configure_uart+0x64>)
   80b12:	600a      	str	r2, [r1, #0]

	// Enable UART interrupt in the Nested Vectored Interrupt Controller(NVIC)
	NVIC_EnableIRQ((IRQn_Type) ID_UART);

	// Enable UART receiver and transmitter
	UART->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   80b14:	2250      	movs	r2, #80	; 0x50
   80b16:	601a      	str	r2, [r3, #0]
   80b18:	4770      	bx	lr
   80b1a:	bf00      	nop
   80b1c:	2000046c 	.word	0x2000046c
   80b20:	400e0e00 	.word	0x400e0e00
   80b24:	e000e100 	.word	0xe000e100

00080b28 <uart_putchar>:
 * \retval Success(0) or failure(1).
 */
int uart_putchar(const uint8_t c)
{
	// Check if the transmitter is ready
	if((UART->UART_SR & UART_SR_TXRDY) != UART_SR_TXRDY)
   80b28:	4b07      	ldr	r3, [pc, #28]	; (80b48 <uart_putchar+0x20>)
   80b2a:	695b      	ldr	r3, [r3, #20]
   80b2c:	f013 0f02 	tst.w	r3, #2
   80b30:	d008      	beq.n	80b44 <uart_putchar+0x1c>
	return 1;

	// Send the character
	UART->UART_THR = c;
   80b32:	4b05      	ldr	r3, [pc, #20]	; (80b48 <uart_putchar+0x20>)
   80b34:	61d8      	str	r0, [r3, #28]
	while(!((UART->UART_SR) & UART_SR_TXEMPTY)); // Wait for the character to be sent, can implement ring buffer to remove the wait
   80b36:	4b04      	ldr	r3, [pc, #16]	; (80b48 <uart_putchar+0x20>)
   80b38:	695b      	ldr	r3, [r3, #20]
   80b3a:	f413 7f00 	tst.w	r3, #512	; 0x200
   80b3e:	d0fa      	beq.n	80b36 <uart_putchar+0xe>
	return 0;
   80b40:	2000      	movs	r0, #0
   80b42:	4770      	bx	lr
	return 1;
   80b44:	2001      	movs	r0, #1
}
   80b46:	4770      	bx	lr
   80b48:	400e0800 	.word	0x400e0800

00080b4c <UART_Handler>:

void UART_Handler(void)
{
   80b4c:	b508      	push	{r3, lr}
	uint32_t status = UART->UART_SR;
   80b4e:	4b15      	ldr	r3, [pc, #84]	; (80ba4 <UART_Handler+0x58>)
   80b50:	695b      	ldr	r3, [r3, #20]
	
	//Reset UART at overflow error and frame error
	if(status & (UART_SR_OVRE | UART_SR_FRAME | UART_SR_PARE))
   80b52:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   80b56:	d003      	beq.n	80b60 <UART_Handler+0x14>
	{
		UART->UART_CR = UART_CR_RXEN | UART_CR_TXEN | UART_CR_RSTSTA;
   80b58:	f44f 71a8 	mov.w	r1, #336	; 0x150
   80b5c:	4a11      	ldr	r2, [pc, #68]	; (80ba4 <UART_Handler+0x58>)
   80b5e:	6011      	str	r1, [r2, #0]
	}
	
	//Check if message is ready to be received
	if(status & UART_SR_RXRDY)
   80b60:	f013 0f01 	tst.w	r3, #1
   80b64:	d012      	beq.n	80b8c <UART_Handler+0x40>
	{
		//Check if receive ring buffer is full and 
		if((rx_buffer.tail + 1) % UART_RINGBUFFER_SIZE == rx_buffer.head)
   80b66:	4810      	ldr	r0, [pc, #64]	; (80ba8 <UART_Handler+0x5c>)
   80b68:	7842      	ldrb	r2, [r0, #1]
   80b6a:	1c53      	adds	r3, r2, #1
   80b6c:	4259      	negs	r1, r3
   80b6e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   80b72:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   80b76:	bf58      	it	pl
   80b78:	424b      	negpl	r3, r1
   80b7a:	7801      	ldrb	r1, [r0, #0]
   80b7c:	428b      	cmp	r3, r1
   80b7e:	d006      	beq.n	80b8e <UART_Handler+0x42>
		{
			printf("ERR: UART RX buffer is full\n\r");
			rx_buffer.data[rx_buffer.tail] = UART->UART_RHR; //Throw away message
			return;
		}
		rx_buffer.data[rx_buffer.tail] = UART->UART_RHR;
   80b80:	4908      	ldr	r1, [pc, #32]	; (80ba4 <UART_Handler+0x58>)
   80b82:	6988      	ldr	r0, [r1, #24]
   80b84:	4908      	ldr	r1, [pc, #32]	; (80ba8 <UART_Handler+0x5c>)
   80b86:	440a      	add	r2, r1
   80b88:	7090      	strb	r0, [r2, #2]
		rx_buffer.tail = (rx_buffer.tail + 1) % UART_RINGBUFFER_SIZE;
   80b8a:	704b      	strb	r3, [r1, #1]
   80b8c:	bd08      	pop	{r3, pc}
			printf("ERR: UART RX buffer is full\n\r");
   80b8e:	4807      	ldr	r0, [pc, #28]	; (80bac <UART_Handler+0x60>)
   80b90:	4b07      	ldr	r3, [pc, #28]	; (80bb0 <UART_Handler+0x64>)
   80b92:	4798      	blx	r3
			rx_buffer.data[rx_buffer.tail] = UART->UART_RHR; //Throw away message
   80b94:	4b04      	ldr	r3, [pc, #16]	; (80ba8 <UART_Handler+0x5c>)
   80b96:	7859      	ldrb	r1, [r3, #1]
   80b98:	4a02      	ldr	r2, [pc, #8]	; (80ba4 <UART_Handler+0x58>)
   80b9a:	6992      	ldr	r2, [r2, #24]
   80b9c:	440b      	add	r3, r1
   80b9e:	709a      	strb	r2, [r3, #2]
			return;
   80ba0:	bd08      	pop	{r3, pc}
   80ba2:	bf00      	nop
   80ba4:	400e0800 	.word	0x400e0800
   80ba8:	2000046c 	.word	0x2000046c
   80bac:	00080dc8 	.word	0x00080dc8
   80bb0:	00080a35 	.word	0x00080a35

00080bb4 <__libc_init_array>:
   80bb4:	b570      	push	{r4, r5, r6, lr}
   80bb6:	4e0f      	ldr	r6, [pc, #60]	; (80bf4 <__libc_init_array+0x40>)
   80bb8:	4d0f      	ldr	r5, [pc, #60]	; (80bf8 <__libc_init_array+0x44>)
   80bba:	1b76      	subs	r6, r6, r5
   80bbc:	10b6      	asrs	r6, r6, #2
   80bbe:	bf18      	it	ne
   80bc0:	2400      	movne	r4, #0
   80bc2:	d005      	beq.n	80bd0 <__libc_init_array+0x1c>
   80bc4:	3401      	adds	r4, #1
   80bc6:	f855 3b04 	ldr.w	r3, [r5], #4
   80bca:	4798      	blx	r3
   80bcc:	42a6      	cmp	r6, r4
   80bce:	d1f9      	bne.n	80bc4 <__libc_init_array+0x10>
   80bd0:	4e0a      	ldr	r6, [pc, #40]	; (80bfc <__libc_init_array+0x48>)
   80bd2:	4d0b      	ldr	r5, [pc, #44]	; (80c00 <__libc_init_array+0x4c>)
   80bd4:	f000 f90a 	bl	80dec <_init>
   80bd8:	1b76      	subs	r6, r6, r5
   80bda:	10b6      	asrs	r6, r6, #2
   80bdc:	bf18      	it	ne
   80bde:	2400      	movne	r4, #0
   80be0:	d006      	beq.n	80bf0 <__libc_init_array+0x3c>
   80be2:	3401      	adds	r4, #1
   80be4:	f855 3b04 	ldr.w	r3, [r5], #4
   80be8:	4798      	blx	r3
   80bea:	42a6      	cmp	r6, r4
   80bec:	d1f9      	bne.n	80be2 <__libc_init_array+0x2e>
   80bee:	bd70      	pop	{r4, r5, r6, pc}
   80bf0:	bd70      	pop	{r4, r5, r6, pc}
   80bf2:	bf00      	nop
   80bf4:	00080df8 	.word	0x00080df8
   80bf8:	00080df8 	.word	0x00080df8
   80bfc:	00080e00 	.word	0x00080e00
   80c00:	00080df8 	.word	0x00080df8

00080c04 <register_fini>:
   80c04:	4b02      	ldr	r3, [pc, #8]	; (80c10 <register_fini+0xc>)
   80c06:	b113      	cbz	r3, 80c0e <register_fini+0xa>
   80c08:	4802      	ldr	r0, [pc, #8]	; (80c14 <register_fini+0x10>)
   80c0a:	f000 b805 	b.w	80c18 <atexit>
   80c0e:	4770      	bx	lr
   80c10:	00000000 	.word	0x00000000
   80c14:	00080c25 	.word	0x00080c25

00080c18 <atexit>:
   80c18:	2300      	movs	r3, #0
   80c1a:	4601      	mov	r1, r0
   80c1c:	461a      	mov	r2, r3
   80c1e:	4618      	mov	r0, r3
   80c20:	f000 b81e 	b.w	80c60 <__register_exitproc>

00080c24 <__libc_fini_array>:
   80c24:	b538      	push	{r3, r4, r5, lr}
   80c26:	4c0a      	ldr	r4, [pc, #40]	; (80c50 <__libc_fini_array+0x2c>)
   80c28:	4d0a      	ldr	r5, [pc, #40]	; (80c54 <__libc_fini_array+0x30>)
   80c2a:	1b64      	subs	r4, r4, r5
   80c2c:	10a4      	asrs	r4, r4, #2
   80c2e:	d00a      	beq.n	80c46 <__libc_fini_array+0x22>
   80c30:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   80c34:	3b01      	subs	r3, #1
   80c36:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   80c3a:	3c01      	subs	r4, #1
   80c3c:	f855 3904 	ldr.w	r3, [r5], #-4
   80c40:	4798      	blx	r3
   80c42:	2c00      	cmp	r4, #0
   80c44:	d1f9      	bne.n	80c3a <__libc_fini_array+0x16>
   80c46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   80c4a:	f000 b8d9 	b.w	80e00 <_fini>
   80c4e:	bf00      	nop
   80c50:	00080e10 	.word	0x00080e10
   80c54:	00080e0c 	.word	0x00080e0c

00080c58 <__retarget_lock_acquire_recursive>:
   80c58:	4770      	bx	lr
   80c5a:	bf00      	nop

00080c5c <__retarget_lock_release_recursive>:
   80c5c:	4770      	bx	lr
   80c5e:	bf00      	nop

00080c60 <__register_exitproc>:
   80c60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   80c64:	4d2c      	ldr	r5, [pc, #176]	; (80d18 <__register_exitproc+0xb8>)
   80c66:	4606      	mov	r6, r0
   80c68:	6828      	ldr	r0, [r5, #0]
   80c6a:	4698      	mov	r8, r3
   80c6c:	460f      	mov	r7, r1
   80c6e:	4691      	mov	r9, r2
   80c70:	f7ff fff2 	bl	80c58 <__retarget_lock_acquire_recursive>
   80c74:	4b29      	ldr	r3, [pc, #164]	; (80d1c <__register_exitproc+0xbc>)
   80c76:	681c      	ldr	r4, [r3, #0]
   80c78:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   80c7c:	2b00      	cmp	r3, #0
   80c7e:	d03e      	beq.n	80cfe <__register_exitproc+0x9e>
   80c80:	685a      	ldr	r2, [r3, #4]
   80c82:	2a1f      	cmp	r2, #31
   80c84:	dc1c      	bgt.n	80cc0 <__register_exitproc+0x60>
   80c86:	f102 0e01 	add.w	lr, r2, #1
   80c8a:	b176      	cbz	r6, 80caa <__register_exitproc+0x4a>
   80c8c:	2101      	movs	r1, #1
   80c8e:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   80c92:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   80c96:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   80c9a:	4091      	lsls	r1, r2
   80c9c:	4308      	orrs	r0, r1
   80c9e:	2e02      	cmp	r6, #2
   80ca0:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   80ca4:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   80ca8:	d023      	beq.n	80cf2 <__register_exitproc+0x92>
   80caa:	3202      	adds	r2, #2
   80cac:	f8c3 e004 	str.w	lr, [r3, #4]
   80cb0:	6828      	ldr	r0, [r5, #0]
   80cb2:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   80cb6:	f7ff ffd1 	bl	80c5c <__retarget_lock_release_recursive>
   80cba:	2000      	movs	r0, #0
   80cbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80cc0:	4b17      	ldr	r3, [pc, #92]	; (80d20 <__register_exitproc+0xc0>)
   80cc2:	b30b      	cbz	r3, 80d08 <__register_exitproc+0xa8>
   80cc4:	f44f 70c8 	mov.w	r0, #400	; 0x190
   80cc8:	f3af 8000 	nop.w
   80ccc:	4603      	mov	r3, r0
   80cce:	b1d8      	cbz	r0, 80d08 <__register_exitproc+0xa8>
   80cd0:	2000      	movs	r0, #0
   80cd2:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   80cd6:	f04f 0e01 	mov.w	lr, #1
   80cda:	6058      	str	r0, [r3, #4]
   80cdc:	6019      	str	r1, [r3, #0]
   80cde:	4602      	mov	r2, r0
   80ce0:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   80ce4:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   80ce8:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   80cec:	2e00      	cmp	r6, #0
   80cee:	d0dc      	beq.n	80caa <__register_exitproc+0x4a>
   80cf0:	e7cc      	b.n	80c8c <__register_exitproc+0x2c>
   80cf2:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   80cf6:	4301      	orrs	r1, r0
   80cf8:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   80cfc:	e7d5      	b.n	80caa <__register_exitproc+0x4a>
   80cfe:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   80d02:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   80d06:	e7bb      	b.n	80c80 <__register_exitproc+0x20>
   80d08:	6828      	ldr	r0, [r5, #0]
   80d0a:	f7ff ffa7 	bl	80c5c <__retarget_lock_release_recursive>
   80d0e:	f04f 30ff 	mov.w	r0, #4294967295
   80d12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80d16:	bf00      	nop
   80d18:	20000440 	.word	0x20000440
   80d1c:	00080de8 	.word	0x00080de8
   80d20:	00000000 	.word	0x00000000
   80d24:	304e4143 	.word	0x304e4143
   80d28:	73656d20 	.word	0x73656d20
   80d2c:	65676173 	.word	0x65676173
   80d30:	72726120 	.word	0x72726120
   80d34:	64657669 	.word	0x64657669
   80d38:	206e6920 	.word	0x206e6920
   80d3c:	2d6e6f6e 	.word	0x2d6e6f6e
   80d40:	64657375 	.word	0x64657375
   80d44:	69616d20 	.word	0x69616d20
   80d48:	786f626c 	.word	0x786f626c
   80d4c:	00000d0a 	.word	0x00000d0a
   80d50:	646c656d 	.word	0x646c656d
   80d54:	00676e69 	.word	0x00676e69
   80d58:	25206469 	.word	0x25206469
   80d5c:	00000a64 	.word	0x00000a64
   80d60:	676e656c 	.word	0x676e656c
   80d64:	25206874 	.word	0x25206874
   80d68:	00000a64 	.word	0x00000a64
   80d6c:	61746164 	.word	0x61746164
   80d70:	0a632520 	.word	0x0a632520
   80d74:	00000000 	.word	0x00000000
   80d78:	25207075 	.word	0x25207075
   80d7c:	00000a63 	.word	0x00000a63
   80d80:	6e776f64 	.word	0x6e776f64
   80d84:	0a632520 	.word	0x0a632520
   80d88:	00000000 	.word	0x00000000
   80d8c:	7466656c 	.word	0x7466656c
   80d90:	0a632520 	.word	0x0a632520
   80d94:	00000000 	.word	0x00000000
   80d98:	68676972 	.word	0x68676972
   80d9c:	63252074 	.word	0x63252074
   80da0:	0000000a 	.word	0x0000000a
   80da4:	7475656e 	.word	0x7475656e
   80da8:	206c6172 	.word	0x206c6172
   80dac:	000a6325 	.word	0x000a6325
   80db0:	64253a78 	.word	0x64253a78
   80db4:	20202020 	.word	0x20202020
   80db8:	0a642579 	.word	0x0a642579
   80dbc:	00000000 	.word	0x00000000
   80dc0:	6c756e28 	.word	0x6c756e28
   80dc4:	0000296c 	.word	0x0000296c
   80dc8:	3a525245 	.word	0x3a525245
   80dcc:	52415520 	.word	0x52415520
   80dd0:	58522054 	.word	0x58522054
   80dd4:	66756220 	.word	0x66756220
   80dd8:	20726566 	.word	0x20726566
   80ddc:	66207369 	.word	0x66207369
   80de0:	0a6c6c75 	.word	0x0a6c6c75
   80de4:	0000000d 	.word	0x0000000d

00080de8 <_global_impure_ptr>:
   80de8:	20000018                                ... 

00080dec <_init>:
   80dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80dee:	bf00      	nop
   80df0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   80df2:	bc08      	pop	{r3}
   80df4:	469e      	mov	lr, r3
   80df6:	4770      	bx	lr

00080df8 <__init_array_start>:
   80df8:	00080c05 	.word	0x00080c05

00080dfc <__frame_dummy_init_array_entry>:
   80dfc:	00080119                                ....

00080e00 <_fini>:
   80e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80e02:	bf00      	nop
   80e04:	bcf8      	pop	{r3, r4, r5, r6, r7}
   80e06:	bc08      	pop	{r3}
   80e08:	469e      	mov	lr, r3
   80e0a:	4770      	bx	lr

00080e0c <__fini_array_start>:
   80e0c:	000800f5 	.word	0x000800f5
