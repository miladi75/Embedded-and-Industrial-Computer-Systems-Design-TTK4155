
Node2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d6c  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000444  20000000  00080d6c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000090  20000444  000811b0  00020444  2**2
                  ALLOC
  3 .stack        00000404  200004d4  00081240  00020444  2**0
                  ALLOC
  4 .heap         00000200  200008d8  00081644  00020444  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020444  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002046d  2**0
                  CONTENTS, READONLY
  7 .debug_info   00005290  00000000  00000000  000204c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000f8f  00000000  00000000  00025756  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000001d8  00000000  00000000  000266e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000168  00000000  00000000  000268bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000127e9  00000000  00000000  00026a25  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00004721  00000000  00000000  0003920e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0005531f  00000000  00000000  0003d92f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000538  00000000  00000000  00092c50  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00000dee  00000000  00000000  00093188  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	d8 08 00 20 c1 04 08 00 bd 04 08 00 bd 04 08 00     ... ............
   80010:	bd 04 08 00 bd 04 08 00 bd 04 08 00 00 00 00 00     ................
	...
   8002c:	bd 04 08 00 bd 04 08 00 00 00 00 00 bd 04 08 00     ................
   8003c:	bd 04 08 00 bd 04 08 00 bd 04 08 00 bd 04 08 00     ................
   8004c:	bd 04 08 00 bd 04 08 00 bd 04 08 00 bd 04 08 00     ................
   8005c:	bd 04 08 00 81 0a 08 00 bd 04 08 00 00 00 00 00     ................
   8006c:	bd 04 08 00 bd 04 08 00 bd 04 08 00 bd 04 08 00     ................
	...
   80084:	bd 04 08 00 bd 04 08 00 bd 04 08 00 bd 04 08 00     ................
   80094:	bd 04 08 00 bd 04 08 00 bd 04 08 00 bd 04 08 00     ................
   800a4:	00 00 00 00 bd 04 08 00 bd 04 08 00 bd 04 08 00     ................
   800b4:	bd 04 08 00 bd 04 08 00 bd 04 08 00 bd 04 08 00     ................
   800c4:	bd 04 08 00 bd 04 08 00 bd 04 08 00 bd 04 08 00     ................
   800d4:	bd 04 08 00 bd 04 08 00 bd 04 08 00 bd 04 08 00     ................
   800e4:	bd 04 08 00 bd 04 08 00 21 03 08 00 bd 04 08 00     ........!.......

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20000444 	.word	0x20000444
   80110:	00000000 	.word	0x00000000
   80114:	00080d6c 	.word	0x00080d6c

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	00080d6c 	.word	0x00080d6c
   80154:	20000448 	.word	0x20000448
   80158:	00080d6c 	.word	0x00080d6c
   8015c:	00000000 	.word	0x00000000

00080160 <ADC_init>:
        __asm__ volatile("nop\n\t"); // busy wait
}

void ADC_init(void){
	
	ADC->ADC_MR = ADC_MR_FREERUN; //12-bit, no prescaler, freerun mode
   80160:	4b08      	ldr	r3, [pc, #32]	; (80184 <ADC_init+0x24>)
   80162:	2280      	movs	r2, #128	; 0x80
   80164:	605a      	str	r2, [r3, #4]
	ADC->ADC_CHER = ADC_CHER_CH0; // AD0 peripheral, PIO pin PA2, pin A7 on shield
   80166:	2201      	movs	r2, #1
   80168:	611a      	str	r2, [r3, #16]
	PMC->PMC_PCR = PMC_PCR_EN | PMC_PCR_DIV_PERIPH_DIV_MCK | (ID_ADC << PMC_PCR_PID_Pos);
   8016a:	4a07      	ldr	r2, [pc, #28]	; (80188 <ADC_init+0x28>)
   8016c:	4907      	ldr	r1, [pc, #28]	; (8018c <ADC_init+0x2c>)
   8016e:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
	PMC->PMC_PCER1 |= 1 << (ID_ADC - 32); //clk = mck, 
   80172:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
   80176:	f041 0120 	orr.w	r1, r1, #32
   8017a:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
	ADC->ADC_CR = ADC_CR_START; // start
   8017e:	2202      	movs	r2, #2
   80180:	601a      	str	r2, [r3, #0]
   80182:	4770      	bx	lr
   80184:	400c0000 	.word	0x400c0000
   80188:	400e0600 	.word	0x400e0600
   8018c:	10000025 	.word	0x10000025

00080190 <ADC_read>:
	
 }
 
 
 uint16_t ADC_read(){
	 uint16_t adc_value = ADC->ADC_CDR[0];
   80190:	4b04      	ldr	r3, [pc, #16]	; (801a4 <ADC_read+0x14>)
   80192:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   80194:	b29b      	uxth	r3, r3
	 if(adc_value<=1000){
   80196:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   8019a:	d901      	bls.n	801a0 <ADC_read+0x10>
		 
	 }else{
		//printf("-----------------> %d\n", ADC->ADC_CDR[0]);	 
		 //busyWait();
		 //delay();
		 return TRUE;
   8019c:	2001      	movs	r0, #1
	 }
	 
	 
	 
 }
   8019e:	4770      	bx	lr
		 return FALSE;
   801a0:	2000      	movs	r0, #0
   801a2:	4770      	bx	lr
   801a4:	400c0000 	.word	0x400c0000

000801a8 <can_init>:
 * \retval Success(0) or failure(1)
 */


uint8_t can_init(uint32_t can_br, uint8_t num_tx_mb, uint8_t num_rx_mb)
{
   801a8:	b4f0      	push	{r4, r5, r6, r7}
	
	//Make sure num_rx_mb and num_tx_mb is valid
	if(num_rx_mb > 8 | num_tx_mb > 8 | num_rx_mb + num_tx_mb > 8)
   801aa:	1857      	adds	r7, r2, r1
   801ac:	2f08      	cmp	r7, #8
   801ae:	bfd4      	ite	le
   801b0:	2300      	movle	r3, #0
   801b2:	2301      	movgt	r3, #1
   801b4:	2908      	cmp	r1, #8
   801b6:	bf98      	it	ls
   801b8:	2a08      	cmpls	r2, #8
   801ba:	d85c      	bhi.n	80276 <can_init+0xce>
   801bc:	460d      	mov	r5, r1
   801be:	2b00      	cmp	r3, #0
   801c0:	d159      	bne.n	80276 <can_init+0xce>


	uint32_t ul_status; 
	
	//Disable can
	CAN0->CAN_MR &= ~CAN_MR_CANEN; 
   801c2:	4a2e      	ldr	r2, [pc, #184]	; (8027c <can_init+0xd4>)
   801c4:	6813      	ldr	r3, [r2, #0]
   801c6:	f023 0301 	bic.w	r3, r3, #1
   801ca:	6013      	str	r3, [r2, #0]
	//Clear status register on read
	ul_status = CAN0->CAN_SR; 
   801cc:	6913      	ldr	r3, [r2, #16]
	
	
	// Disable interrupts on CANH and CANL pins
	PIOA->PIO_IDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   801ce:	4b2c      	ldr	r3, [pc, #176]	; (80280 <can_init+0xd8>)
   801d0:	f44f 7440 	mov.w	r4, #768	; 0x300
   801d4:	645c      	str	r4, [r3, #68]	; 0x44
	
	//Select CAN0 RX and TX in PIOA
	uint32_t ul_sr = PIOA->PIO_ABSR;
   801d6:	6f1c      	ldr	r4, [r3, #112]	; 0x70
	PIOA->PIO_ABSR = ~(PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0) & ul_sr;
   801d8:	f024 0403 	bic.w	r4, r4, #3
   801dc:	671c      	str	r4, [r3, #112]	; 0x70
	
	// Disable the Parallel IO (PIO) of the Rx and Tx pins so that the peripheral controller can use them
	PIOA->PIO_PDR = PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0;
   801de:	2403      	movs	r4, #3
   801e0:	605c      	str	r4, [r3, #4]
	
	// Enable pull up on CANH and CANL pin
	PIOA->PIO_PUER = (PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0);
   801e2:	665c      	str	r4, [r3, #100]	; 0x64
	
	
	//Enable Clock for CAN0 in PMC
	PMC->PMC_PCR = PMC_PCR_EN | (0 << PMC_PCR_DIV_Pos) | PMC_PCR_CMD | (ID_CAN0 << PMC_PCR_PID_Pos); // DIV = 1(can clk = MCK/2), CMD = 1 (write), PID = 2B (CAN0)
   801e4:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   801e8:	4c26      	ldr	r4, [pc, #152]	; (80284 <can_init+0xdc>)
   801ea:	f8c3 410c 	str.w	r4, [r3, #268]	; 0x10c
	PMC->PMC_PCER1 |= 1 << (ID_CAN0 - 32);
   801ee:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
   801f2:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
   801f6:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
	
	//Set baudrate, Phase1, phase2 and propagation delay for can bus. Must match on all nodes!
	CAN0->CAN_BR = can_br; 
   801fa:	6150      	str	r0, [r2, #20]
	

	/****** Start of mailbox configuration ******/

	uint32_t can_ier = 0;
   801fc:	2400      	movs	r4, #0

	/* Configure receive mailboxes */
	for (int n = num_tx_mb; n <= num_rx_mb + num_tx_mb; n++)  //Simply one mailbox setup for all messages. You might want to apply filter for them.
   801fe:	e019      	b.n	80234 <can_init+0x8c>
	{
		CAN0->CAN_MB[n].CAN_MAM = 0; //Accept all messages
   80200:	481e      	ldr	r0, [pc, #120]	; (8027c <can_init+0xd4>)
   80202:	f101 0310 	add.w	r3, r1, #16
   80206:	015b      	lsls	r3, r3, #5
   80208:	18c2      	adds	r2, r0, r3
   8020a:	2600      	movs	r6, #0
   8020c:	6056      	str	r6, [r2, #4]
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   8020e:	eb00 1241 	add.w	r2, r0, r1, lsl #5
   80212:	f04f 5600 	mov.w	r6, #536870912	; 0x20000000
   80216:	f8c2 6208 	str.w	r6, [r2, #520]	; 0x208
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_RX);
   8021a:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
   8021e:	50c6      	str	r6, [r0, r3]
		CAN0->CAN_MB[n].CAN_MCR |= CAN_MCR_MTCR;
   80220:	f8d2 321c 	ldr.w	r3, [r2, #540]	; 0x21c
   80224:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   80228:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c

		can_ier |= 1 << n; //Enable interrupt on rx mailbox
   8022c:	2301      	movs	r3, #1
   8022e:	408b      	lsls	r3, r1
   80230:	431c      	orrs	r4, r3
	for (int n = num_tx_mb; n <= num_rx_mb + num_tx_mb; n++)  //Simply one mailbox setup for all messages. You might want to apply filter for them.
   80232:	3101      	adds	r1, #1
   80234:	42b9      	cmp	r1, r7
   80236:	dde3      	ble.n	80200 <can_init+0x58>
   80238:	2300      	movs	r3, #0
   8023a:	e00d      	b.n	80258 <can_init+0xb0>
	}
	
	/*Configure transmit mailboxes */
	for (int n = 0; n < num_tx_mb; n++)
	{
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   8023c:	490f      	ldr	r1, [pc, #60]	; (8027c <can_init+0xd4>)
   8023e:	eb01 1243 	add.w	r2, r1, r3, lsl #5
   80242:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
   80246:	f8c2 0208 	str.w	r0, [r2, #520]	; 0x208
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_TX);
   8024a:	f103 0210 	add.w	r2, r3, #16
   8024e:	0152      	lsls	r2, r2, #5
   80250:	f04f 7040 	mov.w	r0, #50331648	; 0x3000000
   80254:	5088      	str	r0, [r1, r2]
	for (int n = 0; n < num_tx_mb; n++)
   80256:	3301      	adds	r3, #1
   80258:	42ab      	cmp	r3, r5
   8025a:	dbef      	blt.n	8023c <can_init+0x94>
	}
	
	/****** End of mailbox configuraion ******/

	//Enable interrupt on receive mailboxes
	CAN0->CAN_IER = can_ier;
   8025c:	4b07      	ldr	r3, [pc, #28]	; (8027c <can_init+0xd4>)
   8025e:	605c      	str	r4, [r3, #4]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   80260:	f44f 6100 	mov.w	r1, #2048	; 0x800
   80264:	4a08      	ldr	r2, [pc, #32]	; (80288 <can_init+0xe0>)
   80266:	6051      	str	r1, [r2, #4]

	//Enable interrupt in NVIC 
	NVIC_EnableIRQ(ID_CAN0);

	//enable CAN
	CAN0->CAN_MR |= CAN_MR_CANEN;
   80268:	681a      	ldr	r2, [r3, #0]
   8026a:	f042 0201 	orr.w	r2, r2, #1
   8026e:	601a      	str	r2, [r3, #0]

	return 0;
   80270:	2000      	movs	r0, #0
}
   80272:	bcf0      	pop	{r4, r5, r6, r7}
   80274:	4770      	bx	lr
		return 1; //Too many mailboxes is configured
   80276:	2001      	movs	r0, #1
   80278:	e7fb      	b.n	80272 <can_init+0xca>
   8027a:	bf00      	nop
   8027c:	400b4000 	.word	0x400b4000
   80280:	400e0e00 	.word	0x400e0e00
   80284:	1000102b 	.word	0x1000102b
   80288:	e000e100 	.word	0xe000e100

0008028c <can_init_def_tx_rx_mb>:
{
   8028c:	b508      	push	{r3, lr}
	return can_init(can_br, 1, 2);
   8028e:	2202      	movs	r2, #2
   80290:	2101      	movs	r1, #1
   80292:	4b01      	ldr	r3, [pc, #4]	; (80298 <can_init_def_tx_rx_mb+0xc>)
   80294:	4798      	blx	r3
}
   80296:	bd08      	pop	{r3, pc}
   80298:	000801a9 	.word	0x000801a9

0008029c <can_receive>:
 * \retval Success(0) or failure(1)
 */
uint8_t can_receive(CAN_MESSAGE* can_msg, uint8_t rx_mb_id)
{
	//Check that mailbox is ready
	if(CAN0->CAN_MB[rx_mb_id].CAN_MSR & CAN_MSR_MRDY)
   8029c:	014b      	lsls	r3, r1, #5
   8029e:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   802a2:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   802a6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
   802aa:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   802ae:	d033      	beq.n	80318 <can_receive+0x7c>
{
   802b0:	b470      	push	{r4, r5, r6}
	{
		//Get data from CAN mailbox
		uint32_t data_low = CAN0->CAN_MB[rx_mb_id].CAN_MDL;
   802b2:	014b      	lsls	r3, r1, #5
   802b4:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   802b8:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   802bc:	f8d3 4214 	ldr.w	r4, [r3, #532]	; 0x214
		uint32_t data_high = CAN0->CAN_MB[rx_mb_id].CAN_MDH;
   802c0:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
		
		//Get message ID
		can_msg->id = (uint16_t)((CAN0->CAN_MB[rx_mb_id].CAN_MID & CAN_MID_MIDvA_Msk) >> CAN_MID_MIDvA_Pos);
   802c4:	f8d3 5208 	ldr.w	r5, [r3, #520]	; 0x208
   802c8:	f3c5 458a 	ubfx	r5, r5, #18, #11
   802cc:	8005      	strh	r5, [r0, #0]
		
		//Get data length
		can_msg->data_length = (uint8_t)((CAN0->CAN_MB[rx_mb_id].CAN_MSR & CAN_MSR_MDLC_Msk) >> CAN_MSR_MDLC_Pos);
   802ce:	f8d3 5210 	ldr.w	r5, [r3, #528]	; 0x210
   802d2:	f3c5 4503 	ubfx	r5, r5, #16, #4
   802d6:	7085      	strb	r5, [r0, #2]
		
		//Put data in CAN_MESSAGE object
		for(int i = 0; i < can_msg->data_length;i++)
   802d8:	2300      	movs	r3, #0
   802da:	e003      	b.n	802e4 <can_receive+0x48>
				can_msg->data[i] = (char)(data_low & 0xff);
				data_low = data_low >> 8;
			}
			else
			{
				can_msg->data[i] = (uint8_t)(data_high & 0xff);
   802dc:	18c6      	adds	r6, r0, r3
   802de:	70f2      	strb	r2, [r6, #3]
				data_high = data_high >> 8;
   802e0:	0a12      	lsrs	r2, r2, #8
		for(int i = 0; i < can_msg->data_length;i++)
   802e2:	3301      	adds	r3, #1
   802e4:	42ab      	cmp	r3, r5
   802e6:	da05      	bge.n	802f4 <can_receive+0x58>
			if(i < 4)
   802e8:	2b03      	cmp	r3, #3
   802ea:	dcf7      	bgt.n	802dc <can_receive+0x40>
				can_msg->data[i] = (char)(data_low & 0xff);
   802ec:	18c6      	adds	r6, r0, r3
   802ee:	70f4      	strb	r4, [r6, #3]
				data_low = data_low >> 8;
   802f0:	0a24      	lsrs	r4, r4, #8
   802f2:	e7f6      	b.n	802e2 <can_receive+0x46>
			}
		}
		
		//Reset for new receive
		CAN0->CAN_MB[rx_mb_id].CAN_MMR = CAN_MMR_MOT_MB_RX;
   802f4:	4b09      	ldr	r3, [pc, #36]	; (8031c <can_receive+0x80>)
   802f6:	f101 0210 	add.w	r2, r1, #16
   802fa:	0152      	lsls	r2, r2, #5
   802fc:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   80300:	5098      	str	r0, [r3, r2]
		CAN0->CAN_MB[rx_mb_id].CAN_MCR |= CAN_MCR_MTCR;
   80302:	eb03 1141 	add.w	r1, r3, r1, lsl #5
   80306:	f8d1 321c 	ldr.w	r3, [r1, #540]	; 0x21c
   8030a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   8030e:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c
		return 0;
   80312:	2000      	movs	r0, #0
	}
	else //Mailbox busy
	{
		return 1;
	}
}
   80314:	bc70      	pop	{r4, r5, r6}
   80316:	4770      	bx	lr
		return 1;
   80318:	2001      	movs	r0, #1
   8031a:	4770      	bx	lr
   8031c:	400b4000 	.word	0x400b4000

00080320 <CAN0_Handler>:
 * \param void
 *
 * \retval 
 */
void CAN0_Handler( void )
{
   80320:	b570      	push	{r4, r5, r6, lr}
   80322:	b084      	sub	sp, #16
	if(DEBUG_INTERRUPT)printf("CAN0 interrupt\n\r");
	char can_sr = CAN0->CAN_SR; 
   80324:	4b53      	ldr	r3, [pc, #332]	; (80474 <CAN0_Handler+0x154>)
   80326:	691c      	ldr	r4, [r3, #16]
	
	//RX interrupt
	if(can_sr & (CAN_SR_MB1 | CAN_SR_MB2) )//Only mailbox 1 and 2 specified for receiving
   80328:	f014 0f06 	tst.w	r4, #6
   8032c:	f000 8094 	beq.w	80458 <CAN0_Handler+0x138>
	{
		CAN_MESSAGE message;
		if(can_sr & CAN_SR_MB1)  //Mailbox 1 event
   80330:	f014 0f02 	tst.w	r4, #2
   80334:	d114      	bne.n	80360 <CAN0_Handler+0x40>
		{
			can_receive(&message, 1);

		}
		else if(can_sr & CAN_SR_MB2) //Mailbox 2 event
   80336:	f014 0f04 	tst.w	r4, #4
   8033a:	d016      	beq.n	8036a <CAN0_Handler+0x4a>
		
		{
			can_receive(&message, 2);
   8033c:	2102      	movs	r1, #2
   8033e:	a801      	add	r0, sp, #4
   80340:	4b4d      	ldr	r3, [pc, #308]	; (80478 <CAN0_Handler+0x158>)
   80342:	4798      	blx	r3
		else
		{
			printf("CAN0 message arrived in non-used mailbox\n\r");
		}
		
		if (message.id == 50)
   80344:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   80348:	2b32      	cmp	r3, #50	; 0x32
   8034a:	d012      	beq.n	80372 <CAN0_Handler+0x52>
			printf("data %c\n",message.data[2]);
			printf("data %c\n",message.data[3]);
			printf("data %c\n",message.data[4]);
		}
		
		if (message.id == 10)
   8034c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   80350:	2b0a      	cmp	r3, #10
   80352:	d02f      	beq.n	803b4 <CAN0_Handler+0x94>
				printf("%c\n",message.data[0]);
			}
		}
		
		
		if (message.id == 20)
   80354:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   80358:	2b14      	cmp	r3, #20
   8035a:	d073      	beq.n	80444 <CAN0_Handler+0x124>
			
		}

		if(DEBUG_INTERRUPT)printf("message id: %d\n\r", message.id);
		if(DEBUG_INTERRUPT)printf("message data length: %d\n\r", message.data_length);
		for (int i = 0; i < message.data_length; i++)
   8035c:	2300      	movs	r3, #0
   8035e:	e077      	b.n	80450 <CAN0_Handler+0x130>
			can_receive(&message, 1);
   80360:	2101      	movs	r1, #1
   80362:	a801      	add	r0, sp, #4
   80364:	4b44      	ldr	r3, [pc, #272]	; (80478 <CAN0_Handler+0x158>)
   80366:	4798      	blx	r3
   80368:	e7ec      	b.n	80344 <CAN0_Handler+0x24>
			printf("CAN0 message arrived in non-used mailbox\n\r");
   8036a:	4844      	ldr	r0, [pc, #272]	; (8047c <CAN0_Handler+0x15c>)
   8036c:	4b44      	ldr	r3, [pc, #272]	; (80480 <CAN0_Handler+0x160>)
   8036e:	4798      	blx	r3
   80370:	e7e8      	b.n	80344 <CAN0_Handler+0x24>
			printf("melding");
   80372:	4844      	ldr	r0, [pc, #272]	; (80484 <CAN0_Handler+0x164>)
   80374:	4d42      	ldr	r5, [pc, #264]	; (80480 <CAN0_Handler+0x160>)
   80376:	47a8      	blx	r5
			printf("id %d\n",message.id);
   80378:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   8037c:	4842      	ldr	r0, [pc, #264]	; (80488 <CAN0_Handler+0x168>)
   8037e:	47a8      	blx	r5
			printf("length %d\n",message.data_length);
   80380:	f89d 1006 	ldrb.w	r1, [sp, #6]
   80384:	4841      	ldr	r0, [pc, #260]	; (8048c <CAN0_Handler+0x16c>)
   80386:	47a8      	blx	r5
			printf("data %c\n",message.data[0]);
   80388:	4e41      	ldr	r6, [pc, #260]	; (80490 <CAN0_Handler+0x170>)
   8038a:	f89d 1007 	ldrb.w	r1, [sp, #7]
   8038e:	4630      	mov	r0, r6
   80390:	47a8      	blx	r5
			printf("data %c\n",message.data[1]);
   80392:	f89d 1008 	ldrb.w	r1, [sp, #8]
   80396:	4630      	mov	r0, r6
   80398:	47a8      	blx	r5
			printf("data %c\n",message.data[2]);
   8039a:	f89d 1009 	ldrb.w	r1, [sp, #9]
   8039e:	4630      	mov	r0, r6
   803a0:	47a8      	blx	r5
			printf("data %c\n",message.data[3]);
   803a2:	f89d 100a 	ldrb.w	r1, [sp, #10]
   803a6:	4630      	mov	r0, r6
   803a8:	47a8      	blx	r5
			printf("data %c\n",message.data[4]);
   803aa:	f89d 100b 	ldrb.w	r1, [sp, #11]
   803ae:	4630      	mov	r0, r6
   803b0:	47a8      	blx	r5
   803b2:	e7cb      	b.n	8034c <CAN0_Handler+0x2c>
			if (message.data[0] == UP)
   803b4:	f89d 3007 	ldrb.w	r3, [sp, #7]
   803b8:	4a36      	ldr	r2, [pc, #216]	; (80494 <CAN0_Handler+0x174>)
   803ba:	8812      	ldrh	r2, [r2, #0]
   803bc:	4293      	cmp	r3, r2
   803be:	d019      	beq.n	803f4 <CAN0_Handler+0xd4>
			else if (message.data[0] == DOWN)
   803c0:	4a34      	ldr	r2, [pc, #208]	; (80494 <CAN0_Handler+0x174>)
   803c2:	8892      	ldrh	r2, [r2, #4]
   803c4:	4293      	cmp	r3, r2
   803c6:	d01f      	beq.n	80408 <CAN0_Handler+0xe8>
			else if (message.data[0] == LEFT)
   803c8:	4a33      	ldr	r2, [pc, #204]	; (80498 <CAN0_Handler+0x178>)
   803ca:	8812      	ldrh	r2, [r2, #0]
   803cc:	4293      	cmp	r3, r2
   803ce:	d025      	beq.n	8041c <CAN0_Handler+0xfc>
			else if (message.data[0] == RIGHT)
   803d0:	4a30      	ldr	r2, [pc, #192]	; (80494 <CAN0_Handler+0x174>)
   803d2:	88d2      	ldrh	r2, [r2, #6]
   803d4:	4293      	cmp	r3, r2
   803d6:	d02b      	beq.n	80430 <CAN0_Handler+0x110>
			else if (message.data[0] == NEUTRAL)
   803d8:	4a2e      	ldr	r2, [pc, #184]	; (80494 <CAN0_Handler+0x174>)
   803da:	8912      	ldrh	r2, [r2, #8]
   803dc:	4293      	cmp	r3, r2
   803de:	d1b9      	bne.n	80354 <CAN0_Handler+0x34>
				printf("neutral %c\n",e);
   803e0:	4b2c      	ldr	r3, [pc, #176]	; (80494 <CAN0_Handler+0x174>)
   803e2:	7899      	ldrb	r1, [r3, #2]
   803e4:	482d      	ldr	r0, [pc, #180]	; (8049c <CAN0_Handler+0x17c>)
   803e6:	4d26      	ldr	r5, [pc, #152]	; (80480 <CAN0_Handler+0x160>)
   803e8:	47a8      	blx	r5
				printf("%c\n",message.data[0]);
   803ea:	f89d 1007 	ldrb.w	r1, [sp, #7]
   803ee:	482c      	ldr	r0, [pc, #176]	; (804a0 <CAN0_Handler+0x180>)
   803f0:	47a8      	blx	r5
   803f2:	e7af      	b.n	80354 <CAN0_Handler+0x34>
				printf("up %c\n",e);
   803f4:	4b27      	ldr	r3, [pc, #156]	; (80494 <CAN0_Handler+0x174>)
   803f6:	7899      	ldrb	r1, [r3, #2]
   803f8:	482a      	ldr	r0, [pc, #168]	; (804a4 <CAN0_Handler+0x184>)
   803fa:	4d21      	ldr	r5, [pc, #132]	; (80480 <CAN0_Handler+0x160>)
   803fc:	47a8      	blx	r5
				printf("%c\n",message.data[0]);
   803fe:	f89d 1007 	ldrb.w	r1, [sp, #7]
   80402:	4827      	ldr	r0, [pc, #156]	; (804a0 <CAN0_Handler+0x180>)
   80404:	47a8      	blx	r5
   80406:	e7a5      	b.n	80354 <CAN0_Handler+0x34>
				printf("down %c\n",e);
   80408:	4b22      	ldr	r3, [pc, #136]	; (80494 <CAN0_Handler+0x174>)
   8040a:	7899      	ldrb	r1, [r3, #2]
   8040c:	4826      	ldr	r0, [pc, #152]	; (804a8 <CAN0_Handler+0x188>)
   8040e:	4d1c      	ldr	r5, [pc, #112]	; (80480 <CAN0_Handler+0x160>)
   80410:	47a8      	blx	r5
				printf("%c\n",message.data[0]);
   80412:	f89d 1007 	ldrb.w	r1, [sp, #7]
   80416:	4822      	ldr	r0, [pc, #136]	; (804a0 <CAN0_Handler+0x180>)
   80418:	47a8      	blx	r5
   8041a:	e79b      	b.n	80354 <CAN0_Handler+0x34>
				printf("left %c\n",e);
   8041c:	4b1d      	ldr	r3, [pc, #116]	; (80494 <CAN0_Handler+0x174>)
   8041e:	7899      	ldrb	r1, [r3, #2]
   80420:	4822      	ldr	r0, [pc, #136]	; (804ac <CAN0_Handler+0x18c>)
   80422:	4d17      	ldr	r5, [pc, #92]	; (80480 <CAN0_Handler+0x160>)
   80424:	47a8      	blx	r5
				printf("%c\n",message.data[0]);
   80426:	f89d 1007 	ldrb.w	r1, [sp, #7]
   8042a:	481d      	ldr	r0, [pc, #116]	; (804a0 <CAN0_Handler+0x180>)
   8042c:	47a8      	blx	r5
   8042e:	e791      	b.n	80354 <CAN0_Handler+0x34>
				printf("right %c\n",e);
   80430:	4b18      	ldr	r3, [pc, #96]	; (80494 <CAN0_Handler+0x174>)
   80432:	7899      	ldrb	r1, [r3, #2]
   80434:	481e      	ldr	r0, [pc, #120]	; (804b0 <CAN0_Handler+0x190>)
   80436:	4d12      	ldr	r5, [pc, #72]	; (80480 <CAN0_Handler+0x160>)
   80438:	47a8      	blx	r5
				printf("%c\n",message.data[0]);
   8043a:	f89d 1007 	ldrb.w	r1, [sp, #7]
   8043e:	4818      	ldr	r0, [pc, #96]	; (804a0 <CAN0_Handler+0x180>)
   80440:	47a8      	blx	r5
   80442:	e787      	b.n	80354 <CAN0_Handler+0x34>
			set_servo_pos(message.data[0]);
   80444:	f89d 0007 	ldrb.w	r0, [sp, #7]
   80448:	4b1a      	ldr	r3, [pc, #104]	; (804b4 <CAN0_Handler+0x194>)
   8044a:	4798      	blx	r3
   8044c:	e786      	b.n	8035c <CAN0_Handler+0x3c>
		for (int i = 0; i < message.data_length; i++)
   8044e:	3301      	adds	r3, #1
   80450:	f89d 2006 	ldrb.w	r2, [sp, #6]
   80454:	4293      	cmp	r3, r2
   80456:	dbfa      	blt.n	8044e <CAN0_Handler+0x12e>
			if(DEBUG_INTERRUPT)printf("%d ", message.data[i]);
		}
		if(DEBUG_INTERRUPT)printf("\n\r");
	}
	
	if(can_sr & CAN_SR_MB0)
   80458:	f014 0f01 	tst.w	r4, #1
   8045c:	d002      	beq.n	80464 <CAN0_Handler+0x144>
	{
		if(DEBUG_INTERRUPT) printf("CAN0 MB0 ready to send \n\r");
		
	//Disable interrupt
		CAN0->CAN_IDR = CAN_IER_MB0;
   8045e:	2201      	movs	r2, #1
   80460:	4b04      	ldr	r3, [pc, #16]	; (80474 <CAN0_Handler+0x154>)
   80462:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   80464:	f44f 6200 	mov.w	r2, #2048	; 0x800
   80468:	4b13      	ldr	r3, [pc, #76]	; (804b8 <CAN0_Handler+0x198>)
   8046a:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184

	}
	
	NVIC_ClearPendingIRQ(ID_CAN0);
	//sei();*/
}
   8046e:	b004      	add	sp, #16
   80470:	bd70      	pop	{r4, r5, r6, pc}
   80472:	bf00      	nop
   80474:	400b4000 	.word	0x400b4000
   80478:	0008029d 	.word	0x0008029d
   8047c:	00080c58 	.word	0x00080c58
   80480:	00080945 	.word	0x00080945
   80484:	00080c84 	.word	0x00080c84
   80488:	00080c8c 	.word	0x00080c8c
   8048c:	00080c94 	.word	0x00080c94
   80490:	00080ca0 	.word	0x00080ca0
   80494:	20000000 	.word	0x20000000
   80498:	20000460 	.word	0x20000460
   8049c:	00080cd8 	.word	0x00080cd8
   804a0:	00080ce0 	.word	0x00080ce0
   804a4:	00080cac 	.word	0x00080cac
   804a8:	00080cb4 	.word	0x00080cb4
   804ac:	00080cc0 	.word	0x00080cc0
   804b0:	00080ccc 	.word	0x00080ccc
   804b4:	000809d1 	.word	0x000809d1
   804b8:	e000e100 	.word	0xe000e100

000804bc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   804bc:	e7fe      	b.n	804bc <Dummy_Handler>
	...

000804c0 <Reset_Handler>:
{
   804c0:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
   804c2:	4b11      	ldr	r3, [pc, #68]	; (80508 <Reset_Handler+0x48>)
   804c4:	4a11      	ldr	r2, [pc, #68]	; (8050c <Reset_Handler+0x4c>)
   804c6:	429a      	cmp	r2, r3
   804c8:	d009      	beq.n	804de <Reset_Handler+0x1e>
   804ca:	4b0f      	ldr	r3, [pc, #60]	; (80508 <Reset_Handler+0x48>)
   804cc:	4a0f      	ldr	r2, [pc, #60]	; (8050c <Reset_Handler+0x4c>)
   804ce:	e003      	b.n	804d8 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
   804d0:	6811      	ldr	r1, [r2, #0]
   804d2:	6019      	str	r1, [r3, #0]
   804d4:	3304      	adds	r3, #4
   804d6:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
   804d8:	490d      	ldr	r1, [pc, #52]	; (80510 <Reset_Handler+0x50>)
   804da:	428b      	cmp	r3, r1
   804dc:	d3f8      	bcc.n	804d0 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
   804de:	4b0d      	ldr	r3, [pc, #52]	; (80514 <Reset_Handler+0x54>)
   804e0:	e002      	b.n	804e8 <Reset_Handler+0x28>
                *pDest++ = 0;
   804e2:	2200      	movs	r2, #0
   804e4:	601a      	str	r2, [r3, #0]
   804e6:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
   804e8:	4a0b      	ldr	r2, [pc, #44]	; (80518 <Reset_Handler+0x58>)
   804ea:	4293      	cmp	r3, r2
   804ec:	d3f9      	bcc.n	804e2 <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   804ee:	4b0b      	ldr	r3, [pc, #44]	; (8051c <Reset_Handler+0x5c>)
   804f0:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   804f4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   804f8:	4a09      	ldr	r2, [pc, #36]	; (80520 <Reset_Handler+0x60>)
   804fa:	6093      	str	r3, [r2, #8]
        __libc_init_array();
   804fc:	4b09      	ldr	r3, [pc, #36]	; (80524 <Reset_Handler+0x64>)
   804fe:	4798      	blx	r3
        main();
   80500:	4b09      	ldr	r3, [pc, #36]	; (80528 <Reset_Handler+0x68>)
   80502:	4798      	blx	r3
   80504:	e7fe      	b.n	80504 <Reset_Handler+0x44>
   80506:	bf00      	nop
   80508:	20000000 	.word	0x20000000
   8050c:	00080d6c 	.word	0x00080d6c
   80510:	20000444 	.word	0x20000444
   80514:	20000444 	.word	0x20000444
   80518:	200004d4 	.word	0x200004d4
   8051c:	00080000 	.word	0x00080000
   80520:	e000ed00 	.word	0xe000ed00
   80524:	00080ae9 	.word	0x00080ae9
   80528:	00080625 	.word	0x00080625

0008052c <SystemInit>:
 * Initialize the System and update the SystemFrequency variable.
 */
void SystemInit( void )
{
  /* Set FWS according to SYS_BOARD_MCKR configuration */
  EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   8052c:	f44f 6380 	mov.w	r3, #1024	; 0x400
   80530:	4a20      	ldr	r2, [pc, #128]	; (805b4 <SystemInit+0x88>)
   80532:	6013      	str	r3, [r2, #0]
  EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
   80534:	f502 7200 	add.w	r2, r2, #512	; 0x200
   80538:	6013      	str	r3, [r2, #0]

  /* Initialize main oscillator */
  if ( !(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) )
   8053a:	4b1f      	ldr	r3, [pc, #124]	; (805b8 <SystemInit+0x8c>)
   8053c:	6a1b      	ldr	r3, [r3, #32]
   8053e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80542:	d107      	bne.n	80554 <SystemInit+0x28>
  {
    PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
   80544:	4a1d      	ldr	r2, [pc, #116]	; (805bc <SystemInit+0x90>)
   80546:	4b1c      	ldr	r3, [pc, #112]	; (805b8 <SystemInit+0x8c>)
   80548:	621a      	str	r2, [r3, #32]
    while ( !(PMC->PMC_SR & PMC_SR_MOSCXTS) )
   8054a:	4b1b      	ldr	r3, [pc, #108]	; (805b8 <SystemInit+0x8c>)
   8054c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8054e:	f013 0f01 	tst.w	r3, #1
   80552:	d0fa      	beq.n	8054a <SystemInit+0x1e>
    {
    }
  }

  /* Switch to 3-20MHz Xtal oscillator */
  PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;
   80554:	4a1a      	ldr	r2, [pc, #104]	; (805c0 <SystemInit+0x94>)
   80556:	4b18      	ldr	r3, [pc, #96]	; (805b8 <SystemInit+0x8c>)
   80558:	621a      	str	r2, [r3, #32]

  while ( !(PMC->PMC_SR & PMC_SR_MOSCSELS) )
   8055a:	4b17      	ldr	r3, [pc, #92]	; (805b8 <SystemInit+0x8c>)
   8055c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8055e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   80562:	d0fa      	beq.n	8055a <SystemInit+0x2e>
  {
  }
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
   80564:	4a14      	ldr	r2, [pc, #80]	; (805b8 <SystemInit+0x8c>)
   80566:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80568:	f023 0303 	bic.w	r3, r3, #3
   8056c:	f043 0301 	orr.w	r3, r3, #1
   80570:	6313      	str	r3, [r2, #48]	; 0x30
  while (!(PMC->PMC_SR & PMC_SR_MCKRDY))
   80572:	4b11      	ldr	r3, [pc, #68]	; (805b8 <SystemInit+0x8c>)
   80574:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80576:	f013 0f08 	tst.w	r3, #8
   8057a:	d0fa      	beq.n	80572 <SystemInit+0x46>
  {
  }

  /* Initialize PLLA */
  PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
   8057c:	4a11      	ldr	r2, [pc, #68]	; (805c4 <SystemInit+0x98>)
   8057e:	4b0e      	ldr	r3, [pc, #56]	; (805b8 <SystemInit+0x8c>)
   80580:	629a      	str	r2, [r3, #40]	; 0x28
  while ( !(PMC->PMC_SR & PMC_SR_LOCKA) )
   80582:	4b0d      	ldr	r3, [pc, #52]	; (805b8 <SystemInit+0x8c>)
   80584:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80586:	f013 0f02 	tst.w	r3, #2
   8058a:	d0fa      	beq.n	80582 <SystemInit+0x56>
  {
  }

  /* Switch to main clock */
  PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
   8058c:	2211      	movs	r2, #17
   8058e:	4b0a      	ldr	r3, [pc, #40]	; (805b8 <SystemInit+0x8c>)
   80590:	631a      	str	r2, [r3, #48]	; 0x30
  while ( !(PMC->PMC_SR & PMC_SR_MCKRDY) )
   80592:	4b09      	ldr	r3, [pc, #36]	; (805b8 <SystemInit+0x8c>)
   80594:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80596:	f013 0f08 	tst.w	r3, #8
   8059a:	d0fa      	beq.n	80592 <SystemInit+0x66>
  {
  }

  /* Switch to PLLA */
  PMC->PMC_MCKR = SYS_BOARD_MCKR;
   8059c:	2212      	movs	r2, #18
   8059e:	4b06      	ldr	r3, [pc, #24]	; (805b8 <SystemInit+0x8c>)
   805a0:	631a      	str	r2, [r3, #48]	; 0x30
  while ( !(PMC->PMC_SR & PMC_SR_MCKRDY) )
   805a2:	4b05      	ldr	r3, [pc, #20]	; (805b8 <SystemInit+0x8c>)
   805a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   805a6:	f013 0f08 	tst.w	r3, #8
   805aa:	d0fa      	beq.n	805a2 <SystemInit+0x76>
  {
  }

  SystemCoreClock = CHIP_FREQ_CPU_MAX;
   805ac:	4a06      	ldr	r2, [pc, #24]	; (805c8 <SystemInit+0x9c>)
   805ae:	4b07      	ldr	r3, [pc, #28]	; (805cc <SystemInit+0xa0>)
   805b0:	601a      	str	r2, [r3, #0]
   805b2:	4770      	bx	lr
   805b4:	400e0a00 	.word	0x400e0a00
   805b8:	400e0600 	.word	0x400e0600
   805bc:	00370809 	.word	0x00370809
   805c0:	01370809 	.word	0x01370809
   805c4:	200d3f01 	.word	0x200d3f01
   805c8:	0501bd00 	.word	0x0501bd00
   805cc:	2000000c 	.word	0x2000000c

000805d0 <score_count>:

int counter = 0;
int lives = 3;
int pause = 0;

void score_count(void){
   805d0:	b508      	push	{r3, lr}
	
	int IR_level = ADC_read();
   805d2:	4b0e      	ldr	r3, [pc, #56]	; (8060c <score_count+0x3c>)
   805d4:	4798      	blx	r3
	
	
	
	//sudo code
	if (IR_level == 0 && pause == 0)
   805d6:	b930      	cbnz	r0, 805e6 <score_count+0x16>
   805d8:	4b0d      	ldr	r3, [pc, #52]	; (80610 <score_count+0x40>)
   805da:	681b      	ldr	r3, [r3, #0]
   805dc:	b91b      	cbnz	r3, 805e6 <score_count+0x16>
	{ 
		counter = 1;
   805de:	4b0c      	ldr	r3, [pc, #48]	; (80610 <score_count+0x40>)
   805e0:	2201      	movs	r2, #1
   805e2:	605a      	str	r2, [r3, #4]
		pause = 1;
   805e4:	601a      	str	r2, [r3, #0]
	}
	
	
	if (counter == lives)
   805e6:	4b0a      	ldr	r3, [pc, #40]	; (80610 <score_count+0x40>)
   805e8:	685a      	ldr	r2, [r3, #4]
   805ea:	4b0a      	ldr	r3, [pc, #40]	; (80614 <score_count+0x44>)
   805ec:	681b      	ldr	r3, [r3, #0]
   805ee:	429a      	cmp	r2, r3
   805f0:	d005      	beq.n	805fe <score_count+0x2e>
	{
		printf("Game over");
		counter = 0;
	}
printf("--------------------->%d\n", counter);
   805f2:	4b07      	ldr	r3, [pc, #28]	; (80610 <score_count+0x40>)
   805f4:	6859      	ldr	r1, [r3, #4]
   805f6:	4808      	ldr	r0, [pc, #32]	; (80618 <score_count+0x48>)
   805f8:	4b08      	ldr	r3, [pc, #32]	; (8061c <score_count+0x4c>)
   805fa:	4798      	blx	r3
   805fc:	bd08      	pop	{r3, pc}
		printf("Game over");
   805fe:	4808      	ldr	r0, [pc, #32]	; (80620 <score_count+0x50>)
   80600:	4b06      	ldr	r3, [pc, #24]	; (8061c <score_count+0x4c>)
   80602:	4798      	blx	r3
		counter = 0;
   80604:	2200      	movs	r2, #0
   80606:	4b02      	ldr	r3, [pc, #8]	; (80610 <score_count+0x40>)
   80608:	605a      	str	r2, [r3, #4]
   8060a:	e7f2      	b.n	805f2 <score_count+0x22>
   8060c:	00080191 	.word	0x00080191
   80610:	20000464 	.word	0x20000464
   80614:	20000010 	.word	0x20000010
   80618:	00080cf0 	.word	0x00080cf0
   8061c:	00080945 	.word	0x00080945
   80620:	00080ce4 	.word	0x00080ce4

00080624 <main>:


//#include <util/delay.h>

int main(void)
{
   80624:	b500      	push	{lr}
   80626:	b083      	sub	sp, #12
    /* Initialize the SAM system */
	volatile char e = 'e'; //bug i printf 
   80628:	2365      	movs	r3, #101	; 0x65
   8062a:	f88d 3007 	strb.w	r3, [sp, #7]
    
	SystemInit();
   8062e:	4b14      	ldr	r3, [pc, #80]	; (80680 <main+0x5c>)
   80630:	4798      	blx	r3
	WDT->WDT_MR = WDT_MR_WDDIS; //disable watchdog timer
   80632:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   80636:	4b13      	ldr	r3, [pc, #76]	; (80684 <main+0x60>)
   80638:	605a      	str	r2, [r3, #4]
	configure_uart();
   8063a:	4b13      	ldr	r3, [pc, #76]	; (80688 <main+0x64>)
   8063c:	4798      	blx	r3
	can_init_def_tx_rx_mb(0x00290165);
   8063e:	4813      	ldr	r0, [pc, #76]	; (8068c <main+0x68>)
   80640:	4b13      	ldr	r3, [pc, #76]	; (80690 <main+0x6c>)
   80642:	4798      	blx	r3
	PWM_init();
   80644:	4b13      	ldr	r3, [pc, #76]	; (80694 <main+0x70>)
   80646:	4798      	blx	r3
	ADC_init();
   80648:	4b13      	ldr	r3, [pc, #76]	; (80698 <main+0x74>)
   8064a:	4798      	blx	r3
   8064c:	e003      	b.n	80656 <main+0x32>
	
	if (ADC_read() == 0)
	{
		printf("FALS%c",e);
	}
	else if (ADC_read() == 1)
   8064e:	4b13      	ldr	r3, [pc, #76]	; (8069c <main+0x78>)
   80650:	4798      	blx	r3
   80652:	2801      	cmp	r0, #1
   80654:	d00d      	beq.n	80672 <main+0x4e>
	CAN0_Handler();	
   80656:	4b12      	ldr	r3, [pc, #72]	; (806a0 <main+0x7c>)
   80658:	4798      	blx	r3
	score_count();
   8065a:	4b12      	ldr	r3, [pc, #72]	; (806a4 <main+0x80>)
   8065c:	4798      	blx	r3
	if (ADC_read() == 0)
   8065e:	4b0f      	ldr	r3, [pc, #60]	; (8069c <main+0x78>)
   80660:	4798      	blx	r3
   80662:	2800      	cmp	r0, #0
   80664:	d1f3      	bne.n	8064e <main+0x2a>
		printf("FALS%c",e);
   80666:	f89d 1007 	ldrb.w	r1, [sp, #7]
   8066a:	480f      	ldr	r0, [pc, #60]	; (806a8 <main+0x84>)
   8066c:	4b0f      	ldr	r3, [pc, #60]	; (806ac <main+0x88>)
   8066e:	4798      	blx	r3
   80670:	e7f1      	b.n	80656 <main+0x32>
	{
		printf("TRU%c\n",e);
   80672:	f89d 1007 	ldrb.w	r1, [sp, #7]
   80676:	480e      	ldr	r0, [pc, #56]	; (806b0 <main+0x8c>)
   80678:	4b0c      	ldr	r3, [pc, #48]	; (806ac <main+0x88>)
   8067a:	4798      	blx	r3
   8067c:	e7eb      	b.n	80656 <main+0x32>
   8067e:	bf00      	nop
   80680:	0008052d 	.word	0x0008052d
   80684:	400e1a50 	.word	0x400e1a50
   80688:	000809f5 	.word	0x000809f5
   8068c:	00290165 	.word	0x00290165
   80690:	0008028d 	.word	0x0008028d
   80694:	00080969 	.word	0x00080969
   80698:	00080161 	.word	0x00080161
   8069c:	00080191 	.word	0x00080191
   806a0:	00080321 	.word	0x00080321
   806a4:	000805d1 	.word	0x000805d1
   806a8:	00080d0c 	.word	0x00080d0c
   806ac:	00080945 	.word	0x00080945
   806b0:	00080d14 	.word	0x00080d14

000806b4 <printchar>:
#include "uart.h"


//insert function to print to here
static void printchar(char **str, int c)
{
   806b4:	b508      	push	{r3, lr}
	(void) uart_putchar(c);  //Send characters to uart
   806b6:	b2c8      	uxtb	r0, r1
   806b8:	4b01      	ldr	r3, [pc, #4]	; (806c0 <printchar+0xc>)
   806ba:	4798      	blx	r3
   806bc:	bd08      	pop	{r3, pc}
   806be:	bf00      	nop
   806c0:	00080a5d 	.word	0x00080a5d

000806c4 <prints>:

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
   806c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   806c8:	4607      	mov	r7, r0
   806ca:	460e      	mov	r6, r1
	register int pc = 0, padchar = ' ';

	if (width > 0) {
   806cc:	1e15      	subs	r5, r2, #0
   806ce:	dd02      	ble.n	806d6 <prints+0x12>
   806d0:	460a      	mov	r2, r1
   806d2:	2100      	movs	r1, #0
   806d4:	e004      	b.n	806e0 <prints+0x1c>
	register int pc = 0, padchar = ' ';
   806d6:	f04f 0820 	mov.w	r8, #32
   806da:	e00e      	b.n	806fa <prints+0x36>
		register int len = 0;
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
   806dc:	3101      	adds	r1, #1
   806de:	3201      	adds	r2, #1
   806e0:	7810      	ldrb	r0, [r2, #0]
   806e2:	2800      	cmp	r0, #0
   806e4:	d1fa      	bne.n	806dc <prints+0x18>
		if (len >= width) width = 0;
   806e6:	42a9      	cmp	r1, r5
   806e8:	da01      	bge.n	806ee <prints+0x2a>
		else width -= len;
   806ea:	1a6d      	subs	r5, r5, r1
   806ec:	e000      	b.n	806f0 <prints+0x2c>
		if (len >= width) width = 0;
   806ee:	2500      	movs	r5, #0
		if (pad & PAD_ZERO) padchar = '0';
   806f0:	f013 0f02 	tst.w	r3, #2
   806f4:	d106      	bne.n	80704 <prints+0x40>
	register int pc = 0, padchar = ' ';
   806f6:	f04f 0820 	mov.w	r8, #32
	}
	if (!(pad & PAD_RIGHT)) {
   806fa:	f013 0401 	ands.w	r4, r3, #1
   806fe:	d00a      	beq.n	80716 <prints+0x52>
	register int pc = 0, padchar = ' ';
   80700:	2400      	movs	r4, #0
   80702:	e010      	b.n	80726 <prints+0x62>
		if (pad & PAD_ZERO) padchar = '0';
   80704:	f04f 0830 	mov.w	r8, #48	; 0x30
   80708:	e7f7      	b.n	806fa <prints+0x36>
		for ( ; width > 0; --width) {
			printchar (out, padchar);
   8070a:	4641      	mov	r1, r8
   8070c:	4638      	mov	r0, r7
   8070e:	4b0d      	ldr	r3, [pc, #52]	; (80744 <prints+0x80>)
   80710:	4798      	blx	r3
			++pc;
   80712:	3401      	adds	r4, #1
		for ( ; width > 0; --width) {
   80714:	3d01      	subs	r5, #1
   80716:	2d00      	cmp	r5, #0
   80718:	dcf7      	bgt.n	8070a <prints+0x46>
   8071a:	e004      	b.n	80726 <prints+0x62>
		}
	}
	for ( ; *string ; ++string) {
		printchar (out, *string);
   8071c:	4638      	mov	r0, r7
   8071e:	4b09      	ldr	r3, [pc, #36]	; (80744 <prints+0x80>)
   80720:	4798      	blx	r3
		++pc;
   80722:	3401      	adds	r4, #1
	for ( ; *string ; ++string) {
   80724:	3601      	adds	r6, #1
   80726:	7831      	ldrb	r1, [r6, #0]
   80728:	2900      	cmp	r1, #0
   8072a:	d1f7      	bne.n	8071c <prints+0x58>
   8072c:	e005      	b.n	8073a <prints+0x76>
	}
	for ( ; width > 0; --width) {
		printchar (out, padchar);
   8072e:	4641      	mov	r1, r8
   80730:	4638      	mov	r0, r7
   80732:	4b04      	ldr	r3, [pc, #16]	; (80744 <prints+0x80>)
   80734:	4798      	blx	r3
		++pc;
   80736:	3401      	adds	r4, #1
	for ( ; width > 0; --width) {
   80738:	3d01      	subs	r5, #1
   8073a:	2d00      	cmp	r5, #0
   8073c:	dcf7      	bgt.n	8072e <prints+0x6a>
	}

	return pc;
}
   8073e:	4620      	mov	r0, r4
   80740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80744:	000806b5 	.word	0x000806b5

00080748 <printi>:

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
   80748:	b5f0      	push	{r4, r5, r6, r7, lr}
   8074a:	b085      	sub	sp, #20
   8074c:	4607      	mov	r7, r0
   8074e:	980c      	ldr	r0, [sp, #48]	; 0x30
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
	register unsigned int u = i;

	if (i == 0) {
   80750:	b151      	cbz	r1, 80768 <printi+0x20>
   80752:	461e      	mov	r6, r3
   80754:	460c      	mov	r4, r1
		print_buf[0] = '0';
		print_buf[1] = '\0';
		return prints (out, print_buf, width, pad);
	}

	if (sg && b == 10 && i < 0) {
   80756:	b113      	cbz	r3, 8075e <printi+0x16>
   80758:	2a0a      	cmp	r2, #10
   8075a:	d012      	beq.n	80782 <printi+0x3a>
	register int t, neg = 0, pc = 0;
   8075c:	2600      	movs	r6, #0
		neg = 1;
		u = -i;
	}

	s = print_buf + PRINT_BUF_LEN-1;
	*s = '\0';
   8075e:	ad04      	add	r5, sp, #16
   80760:	2300      	movs	r3, #0
   80762:	f805 3d01 	strb.w	r3, [r5, #-1]!

	while (u) {
   80766:	e018      	b.n	8079a <printi+0x52>
		print_buf[0] = '0';
   80768:	2330      	movs	r3, #48	; 0x30
   8076a:	f88d 3004 	strb.w	r3, [sp, #4]
		print_buf[1] = '\0';
   8076e:	2300      	movs	r3, #0
   80770:	f88d 3005 	strb.w	r3, [sp, #5]
		return prints (out, print_buf, width, pad);
   80774:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   80776:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   80778:	a901      	add	r1, sp, #4
   8077a:	4638      	mov	r0, r7
   8077c:	4c1b      	ldr	r4, [pc, #108]	; (807ec <printi+0xa4>)
   8077e:	47a0      	blx	r4
   80780:	e029      	b.n	807d6 <printi+0x8e>
	if (sg && b == 10 && i < 0) {
   80782:	2900      	cmp	r1, #0
   80784:	db01      	blt.n	8078a <printi+0x42>
	register int t, neg = 0, pc = 0;
   80786:	2600      	movs	r6, #0
   80788:	e7e9      	b.n	8075e <printi+0x16>
		u = -i;
   8078a:	424c      	negs	r4, r1
		neg = 1;
   8078c:	2601      	movs	r6, #1
   8078e:	e7e6      	b.n	8075e <printi+0x16>
		t = u % b;
		if( t >= 10 )
			t += letbase - '0' - 10;
		*--s = t + '0';
   80790:	3330      	adds	r3, #48	; 0x30
   80792:	f805 3d01 	strb.w	r3, [r5, #-1]!
		u /= b;
   80796:	fbb4 f4f2 	udiv	r4, r4, r2
	while (u) {
   8079a:	b14c      	cbz	r4, 807b0 <printi+0x68>
		t = u % b;
   8079c:	fbb4 f3f2 	udiv	r3, r4, r2
   807a0:	fb02 4313 	mls	r3, r2, r3, r4
		if( t >= 10 )
   807a4:	2b09      	cmp	r3, #9
   807a6:	ddf3      	ble.n	80790 <printi+0x48>
			t += letbase - '0' - 10;
   807a8:	f1a0 013a 	sub.w	r1, r0, #58	; 0x3a
   807ac:	440b      	add	r3, r1
   807ae:	e7ef      	b.n	80790 <printi+0x48>
	}

	if (neg) {
   807b0:	b156      	cbz	r6, 807c8 <printi+0x80>
		if( width && (pad & PAD_ZERO) ) {
   807b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   807b4:	b11b      	cbz	r3, 807be <printi+0x76>
   807b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   807b8:	f013 0f02 	tst.w	r3, #2
   807bc:	d10d      	bne.n	807da <printi+0x92>
			printchar (out, '-');
			++pc;
			--width;
		}
		else {
			*--s = '-';
   807be:	232d      	movs	r3, #45	; 0x2d
   807c0:	f805 3c01 	strb.w	r3, [r5, #-1]
   807c4:	3d01      	subs	r5, #1
	register int t, neg = 0, pc = 0;
   807c6:	2600      	movs	r6, #0
		}
	}

	return pc + prints (out, s, width, pad);
   807c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   807ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   807cc:	4629      	mov	r1, r5
   807ce:	4638      	mov	r0, r7
   807d0:	4c06      	ldr	r4, [pc, #24]	; (807ec <printi+0xa4>)
   807d2:	47a0      	blx	r4
   807d4:	4430      	add	r0, r6
}
   807d6:	b005      	add	sp, #20
   807d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			printchar (out, '-');
   807da:	212d      	movs	r1, #45	; 0x2d
   807dc:	4638      	mov	r0, r7
   807de:	4b04      	ldr	r3, [pc, #16]	; (807f0 <printi+0xa8>)
   807e0:	4798      	blx	r3
			--width;
   807e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   807e4:	3b01      	subs	r3, #1
   807e6:	930a      	str	r3, [sp, #40]	; 0x28
   807e8:	e7ee      	b.n	807c8 <printi+0x80>
   807ea:	bf00      	nop
   807ec:	000806c5 	.word	0x000806c5
   807f0:	000806b5 	.word	0x000806b5

000807f4 <print>:

static int print( char **out, const char *format, va_list args )
{
   807f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   807f6:	b089      	sub	sp, #36	; 0x24
   807f8:	4606      	mov	r6, r0
   807fa:	460c      	mov	r4, r1
   807fc:	9205      	str	r2, [sp, #20]
	register int width, pad;
	register int pc = 0;
   807fe:	2500      	movs	r5, #0
	char scr[2];

	for (; *format != 0; ++format) {
   80800:	e081      	b.n	80906 <print+0x112>
			++format;
			width = pad = 0;
			if (*format == '\0') break;
			if (*format == '%') goto out;
			if (*format == '-') {
				++format;
   80802:	1ca2      	adds	r2, r4, #2
				pad = PAD_RIGHT;
   80804:	2301      	movs	r3, #1
   80806:	e08b      	b.n	80920 <print+0x12c>
			}
			while (*format == '0') {
				++format;
   80808:	3401      	adds	r4, #1
				pad |= PAD_ZERO;
   8080a:	f043 0302 	orr.w	r3, r3, #2
			while (*format == '0') {
   8080e:	7822      	ldrb	r2, [r4, #0]
   80810:	2a30      	cmp	r2, #48	; 0x30
   80812:	d0f9      	beq.n	80808 <print+0x14>
   80814:	2200      	movs	r2, #0
   80816:	e006      	b.n	80826 <print+0x32>
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
				width *= 10;
   80818:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   8081c:	0050      	lsls	r0, r2, #1
				width += *format - '0';
   8081e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   80822:	4402      	add	r2, r0
			for ( ; *format >= '0' && *format <= '9'; ++format) {
   80824:	3401      	adds	r4, #1
   80826:	7821      	ldrb	r1, [r4, #0]
   80828:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
   8082c:	b2c0      	uxtb	r0, r0
   8082e:	2809      	cmp	r0, #9
   80830:	d9f2      	bls.n	80818 <print+0x24>
			}
			if( *format == 's' ) {
   80832:	2973      	cmp	r1, #115	; 0x73
   80834:	d018      	beq.n	80868 <print+0x74>
				register char *s = (char *)va_arg( args, int );
				pc += prints (out, s?s:"(null)", width, pad);
				continue;
			}
			if( *format == 'd' ) {
   80836:	2964      	cmp	r1, #100	; 0x64
   80838:	d022      	beq.n	80880 <print+0x8c>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
				continue;
			}
			if( *format == 'x' ) {
   8083a:	2978      	cmp	r1, #120	; 0x78
   8083c:	d02f      	beq.n	8089e <print+0xaa>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
				continue;
			}
			if( *format == 'X' ) {
   8083e:	2958      	cmp	r1, #88	; 0x58
   80840:	d03c      	beq.n	808bc <print+0xc8>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
				continue;
			}
			if( *format == 'u' ) {
   80842:	2975      	cmp	r1, #117	; 0x75
   80844:	d049      	beq.n	808da <print+0xe6>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
				continue;
			}
			if( *format == 'c' ) {
   80846:	2963      	cmp	r1, #99	; 0x63
   80848:	d15c      	bne.n	80904 <print+0x110>
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
   8084a:	9905      	ldr	r1, [sp, #20]
   8084c:	1d08      	adds	r0, r1, #4
   8084e:	9005      	str	r0, [sp, #20]
   80850:	7809      	ldrb	r1, [r1, #0]
   80852:	f88d 101c 	strb.w	r1, [sp, #28]
				scr[1] = '\0';
   80856:	2100      	movs	r1, #0
   80858:	f88d 101d 	strb.w	r1, [sp, #29]
				pc += prints (out, scr, width, pad);
   8085c:	a907      	add	r1, sp, #28
   8085e:	4630      	mov	r0, r6
   80860:	4f34      	ldr	r7, [pc, #208]	; (80934 <print+0x140>)
   80862:	47b8      	blx	r7
   80864:	4405      	add	r5, r0
				continue;
   80866:	e04d      	b.n	80904 <print+0x110>
				register char *s = (char *)va_arg( args, int );
   80868:	9905      	ldr	r1, [sp, #20]
   8086a:	1d08      	adds	r0, r1, #4
   8086c:	9005      	str	r0, [sp, #20]
   8086e:	6809      	ldr	r1, [r1, #0]
				pc += prints (out, s?s:"(null)", width, pad);
   80870:	b121      	cbz	r1, 8087c <print+0x88>
   80872:	4630      	mov	r0, r6
   80874:	4f2f      	ldr	r7, [pc, #188]	; (80934 <print+0x140>)
   80876:	47b8      	blx	r7
   80878:	4405      	add	r5, r0
				continue;
   8087a:	e043      	b.n	80904 <print+0x110>
				pc += prints (out, s?s:"(null)", width, pad);
   8087c:	492e      	ldr	r1, [pc, #184]	; (80938 <print+0x144>)
   8087e:	e7f8      	b.n	80872 <print+0x7e>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
   80880:	9905      	ldr	r1, [sp, #20]
   80882:	1d08      	adds	r0, r1, #4
   80884:	9005      	str	r0, [sp, #20]
   80886:	6809      	ldr	r1, [r1, #0]
   80888:	2061      	movs	r0, #97	; 0x61
   8088a:	9002      	str	r0, [sp, #8]
   8088c:	9301      	str	r3, [sp, #4]
   8088e:	9200      	str	r2, [sp, #0]
   80890:	2301      	movs	r3, #1
   80892:	220a      	movs	r2, #10
   80894:	4630      	mov	r0, r6
   80896:	4f29      	ldr	r7, [pc, #164]	; (8093c <print+0x148>)
   80898:	47b8      	blx	r7
   8089a:	4405      	add	r5, r0
				continue;
   8089c:	e032      	b.n	80904 <print+0x110>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
   8089e:	9905      	ldr	r1, [sp, #20]
   808a0:	1d08      	adds	r0, r1, #4
   808a2:	9005      	str	r0, [sp, #20]
   808a4:	6809      	ldr	r1, [r1, #0]
   808a6:	2061      	movs	r0, #97	; 0x61
   808a8:	9002      	str	r0, [sp, #8]
   808aa:	9301      	str	r3, [sp, #4]
   808ac:	9200      	str	r2, [sp, #0]
   808ae:	2300      	movs	r3, #0
   808b0:	2210      	movs	r2, #16
   808b2:	4630      	mov	r0, r6
   808b4:	4f21      	ldr	r7, [pc, #132]	; (8093c <print+0x148>)
   808b6:	47b8      	blx	r7
   808b8:	4405      	add	r5, r0
				continue;
   808ba:	e023      	b.n	80904 <print+0x110>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
   808bc:	9905      	ldr	r1, [sp, #20]
   808be:	1d08      	adds	r0, r1, #4
   808c0:	9005      	str	r0, [sp, #20]
   808c2:	6809      	ldr	r1, [r1, #0]
   808c4:	2041      	movs	r0, #65	; 0x41
   808c6:	9002      	str	r0, [sp, #8]
   808c8:	9301      	str	r3, [sp, #4]
   808ca:	9200      	str	r2, [sp, #0]
   808cc:	2300      	movs	r3, #0
   808ce:	2210      	movs	r2, #16
   808d0:	4630      	mov	r0, r6
   808d2:	4f1a      	ldr	r7, [pc, #104]	; (8093c <print+0x148>)
   808d4:	47b8      	blx	r7
   808d6:	4405      	add	r5, r0
				continue;
   808d8:	e014      	b.n	80904 <print+0x110>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
   808da:	9905      	ldr	r1, [sp, #20]
   808dc:	1d08      	adds	r0, r1, #4
   808de:	9005      	str	r0, [sp, #20]
   808e0:	6809      	ldr	r1, [r1, #0]
   808e2:	2061      	movs	r0, #97	; 0x61
   808e4:	9002      	str	r0, [sp, #8]
   808e6:	9301      	str	r3, [sp, #4]
   808e8:	9200      	str	r2, [sp, #0]
   808ea:	2300      	movs	r3, #0
   808ec:	220a      	movs	r2, #10
   808ee:	4630      	mov	r0, r6
   808f0:	4f12      	ldr	r7, [pc, #72]	; (8093c <print+0x148>)
   808f2:	47b8      	blx	r7
   808f4:	4405      	add	r5, r0
				continue;
   808f6:	e005      	b.n	80904 <print+0x110>
			++format;
   808f8:	4614      	mov	r4, r2
			}
		}
		else {
		out:
			printchar (out, *format);
   808fa:	7821      	ldrb	r1, [r4, #0]
   808fc:	4630      	mov	r0, r6
   808fe:	4b10      	ldr	r3, [pc, #64]	; (80940 <print+0x14c>)
   80900:	4798      	blx	r3
			++pc;
   80902:	3501      	adds	r5, #1
	for (; *format != 0; ++format) {
   80904:	3401      	adds	r4, #1
   80906:	7823      	ldrb	r3, [r4, #0]
   80908:	b163      	cbz	r3, 80924 <print+0x130>
		if (*format == '%') {
   8090a:	2b25      	cmp	r3, #37	; 0x25
   8090c:	d1f5      	bne.n	808fa <print+0x106>
			++format;
   8090e:	1c62      	adds	r2, r4, #1
			if (*format == '\0') break;
   80910:	7863      	ldrb	r3, [r4, #1]
   80912:	b13b      	cbz	r3, 80924 <print+0x130>
			if (*format == '%') goto out;
   80914:	2b25      	cmp	r3, #37	; 0x25
   80916:	d0ef      	beq.n	808f8 <print+0x104>
			if (*format == '-') {
   80918:	2b2d      	cmp	r3, #45	; 0x2d
   8091a:	f43f af72 	beq.w	80802 <print+0xe>
			width = pad = 0;
   8091e:	2300      	movs	r3, #0
   80920:	4614      	mov	r4, r2
   80922:	e774      	b.n	8080e <print+0x1a>
		}
	}
	if (out) **out = '\0';
   80924:	b116      	cbz	r6, 8092c <print+0x138>
   80926:	6833      	ldr	r3, [r6, #0]
   80928:	2200      	movs	r2, #0
   8092a:	701a      	strb	r2, [r3, #0]
	va_end( args );
	return pc;
}
   8092c:	4628      	mov	r0, r5
   8092e:	b009      	add	sp, #36	; 0x24
   80930:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80932:	bf00      	nop
   80934:	000806c5 	.word	0x000806c5
   80938:	00080d1c 	.word	0x00080d1c
   8093c:	00080749 	.word	0x00080749
   80940:	000806b5 	.word	0x000806b5

00080944 <printf>:

int printf(const char *format, ...)
{
   80944:	b40f      	push	{r0, r1, r2, r3}
   80946:	b500      	push	{lr}
   80948:	b083      	sub	sp, #12
   8094a:	aa04      	add	r2, sp, #16
   8094c:	f852 1b04 	ldr.w	r1, [r2], #4
        va_list args;
        
        va_start( args, format );
   80950:	9201      	str	r2, [sp, #4]
        return print( 0, format, args );
   80952:	2000      	movs	r0, #0
   80954:	4b03      	ldr	r3, [pc, #12]	; (80964 <printf+0x20>)
   80956:	4798      	blx	r3
}
   80958:	b003      	add	sp, #12
   8095a:	f85d eb04 	ldr.w	lr, [sp], #4
   8095e:	b004      	add	sp, #16
   80960:	4770      	bx	lr
   80962:	bf00      	nop
   80964:	000807f5 	.word	0x000807f5

00080968 <PWM_init>:
 */ 
#include "sam.h"
#include "PWM.h"

void PWM_init(void){
	PMC->PMC_PCER1 |= PMC_PCER1_PID36;
   80968:	4a15      	ldr	r2, [pc, #84]	; (809c0 <PWM_init+0x58>)
   8096a:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
   8096e:	f043 0310 	orr.w	r3, r3, #16
   80972:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
	
	PIOC->PIO_OER |= PIO_PC19;
   80976:	4b13      	ldr	r3, [pc, #76]	; (809c4 <PWM_init+0x5c>)
   80978:	691a      	ldr	r2, [r3, #16]
   8097a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   8097e:	611a      	str	r2, [r3, #16]
	PIOC->PIO_PDR |= PIO_PC19;
   80980:	685a      	ldr	r2, [r3, #4]
   80982:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   80986:	605a      	str	r2, [r3, #4]
	PIOC->PIO_ABSR |= PIO_ABSR_P19;
   80988:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   8098a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   8098e:	671a      	str	r2, [r3, #112]	; 0x70
	
	PWM->PWM_WPCR &= ~PIO_WPMR_WPEN;
   80990:	4a0d      	ldr	r2, [pc, #52]	; (809c8 <PWM_init+0x60>)
   80992:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
   80996:	f023 0301 	bic.w	r3, r3, #1
   8099a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
	REG_PWM_CMR5 = PWM_CMR_CPRE_MCK_DIV_1024 | PWM_CMR_CPOL;
   8099e:	f240 220a 	movw	r2, #522	; 0x20a
   809a2:	4b0a      	ldr	r3, [pc, #40]	; (809cc <PWM_init+0x64>)
   809a4:	601a      	str	r2, [r3, #0]
	REG_PWM_CPRD5 = 1640;
   809a6:	f44f 62cd 	mov.w	r2, #1640	; 0x668
   809aa:	330c      	adds	r3, #12
   809ac:	601a      	str	r2, [r3, #0]
	REG_PWM_CDTY5 = 123;
   809ae:	227b      	movs	r2, #123	; 0x7b
   809b0:	3b08      	subs	r3, #8
   809b2:	601a      	str	r2, [r3, #0]
	REG_PWM_ENA = PWM_ENA_CHID5;
   809b4:	2220      	movs	r2, #32
   809b6:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
   809ba:	601a      	str	r2, [r3, #0]
   809bc:	4770      	bx	lr
   809be:	bf00      	nop
   809c0:	400e0600 	.word	0x400e0600
   809c4:	400e1200 	.word	0x400e1200
   809c8:	40094000 	.word	0x40094000
   809cc:	400942a0 	.word	0x400942a0

000809d0 <set_servo_pos>:
	
}

void set_servo_pos(int value){
	
	value = 92 + value*96/255;
   809d0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   809d4:	0143      	lsls	r3, r0, #5
   809d6:	4a05      	ldr	r2, [pc, #20]	; (809ec <set_servo_pos+0x1c>)
   809d8:	fb82 1203 	smull	r1, r2, r2, r3
   809dc:	441a      	add	r2, r3
   809de:	17db      	asrs	r3, r3, #31
   809e0:	ebc3 13e2 	rsb	r3, r3, r2, asr #7
   809e4:	335c      	adds	r3, #92	; 0x5c
	//if (new_value > 172)
	//{
		//new_value = 172;
	//}
	
	REG_PWM_CDTY5 = value; //92 + value*98/255;//74
   809e6:	4a02      	ldr	r2, [pc, #8]	; (809f0 <set_servo_pos+0x20>)
   809e8:	6013      	str	r3, [r2, #0]
   809ea:	4770      	bx	lr
   809ec:	80808081 	.word	0x80808081
   809f0:	400942a4 	.word	0x400942a4

000809f4 <configure_uart>:
	uint32_t ul_sr;

/*
Initialize UART ring buffer as empty
*/
rx_buffer.head=0;
   809f4:	4b16      	ldr	r3, [pc, #88]	; (80a50 <configure_uart+0x5c>)
   809f6:	2200      	movs	r2, #0
   809f8:	701a      	strb	r2, [r3, #0]
rx_buffer.tail=0;
   809fa:	705a      	strb	r2, [r3, #1]
/*
Initialize UART communication
*/
	// Pin configuration
	// Disable interrupts on Uart receive (URXD) and transmit (UTXD) pins
	PIOA->PIO_IDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   809fc:	4b15      	ldr	r3, [pc, #84]	; (80a54 <configure_uart+0x60>)
   809fe:	f44f 7140 	mov.w	r1, #768	; 0x300
   80a02:	6459      	str	r1, [r3, #68]	; 0x44

	// Disable the Parallel IO (PIO) of the URXD and UTXD pins so that the peripheral controller can use them
	PIOA->PIO_PDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80a04:	6059      	str	r1, [r3, #4]

	// Read current peripheral AB select register and set the UTXD and URXD pins to 0 (UART is connected as peripheral A)
	ul_sr = PIOA->PIO_ABSR;
   80a06:	6f1a      	ldr	r2, [r3, #112]	; 0x70
	PIOA->PIO_ABSR &= ~(PIO_PA8A_URXD | PIO_PA9A_UTXD) & ul_sr;
   80a08:	6f18      	ldr	r0, [r3, #112]	; 0x70
   80a0a:	4002      	ands	r2, r0
   80a0c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   80a10:	671a      	str	r2, [r3, #112]	; 0x70

	// Enable pull up resistor on URXD and UTXD pin
	PIOA->PIO_PUER = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80a12:	6659      	str	r1, [r3, #100]	; 0x64

	// Uart configuration
	
	// Enable the peripheral UART controller in Power Management Controller (PMC)
	PMC->PMC_PCER0 = 1 << ID_UART;
   80a14:	f44f 7280 	mov.w	r2, #256	; 0x100
   80a18:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   80a1c:	611a      	str	r2, [r3, #16]

	// Reset and disable receiver and transmitter
	UART->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX | UART_CR_RXDIS | UART_CR_TXDIS;
   80a1e:	f503 7300 	add.w	r3, r3, #512	; 0x200
   80a22:	21ac      	movs	r1, #172	; 0xac
   80a24:	6019      	str	r1, [r3, #0]

	// Set the baudrate
	UART->UART_BRGR = 547; // MCK / 16 * x = BaudRate (write x into UART_BRGR)  
   80a26:	f240 2123 	movw	r1, #547	; 0x223
   80a2a:	6219      	str	r1, [r3, #32]

	// No parity bits
	UART->UART_MR = UART_MR_PAR_NO | UART_MR_CHMODE_NORMAL;	
   80a2c:	f44f 6100 	mov.w	r1, #2048	; 0x800
   80a30:	6059      	str	r1, [r3, #4]

	// Disable PDC channel
	UART->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   80a32:	f240 2102 	movw	r1, #514	; 0x202
   80a36:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120

	// Configure interrupts on receive ready and errors
	UART->UART_IDR = 0xFFFFFFFF;
   80a3a:	f04f 31ff 	mov.w	r1, #4294967295
   80a3e:	60d9      	str	r1, [r3, #12]
	UART->UART_IER = UART_IER_RXRDY | UART_IER_OVRE | UART_IER_FRAME | UART_IER_PARE;
   80a40:	21e1      	movs	r1, #225	; 0xe1
   80a42:	6099      	str	r1, [r3, #8]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   80a44:	4904      	ldr	r1, [pc, #16]	; (80a58 <configure_uart+0x64>)
   80a46:	600a      	str	r2, [r1, #0]

	// Enable UART interrupt in the Nested Vectored Interrupt Controller(NVIC)
	NVIC_EnableIRQ((IRQn_Type) ID_UART);

	// Enable UART receiver and transmitter
	UART->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   80a48:	2250      	movs	r2, #80	; 0x50
   80a4a:	601a      	str	r2, [r3, #0]
   80a4c:	4770      	bx	lr
   80a4e:	bf00      	nop
   80a50:	2000046c 	.word	0x2000046c
   80a54:	400e0e00 	.word	0x400e0e00
   80a58:	e000e100 	.word	0xe000e100

00080a5c <uart_putchar>:
 * \retval Success(0) or failure(1).
 */
int uart_putchar(const uint8_t c)
{
	// Check if the transmitter is ready
	if((UART->UART_SR & UART_SR_TXRDY) != UART_SR_TXRDY)
   80a5c:	4b07      	ldr	r3, [pc, #28]	; (80a7c <uart_putchar+0x20>)
   80a5e:	695b      	ldr	r3, [r3, #20]
   80a60:	f013 0f02 	tst.w	r3, #2
   80a64:	d008      	beq.n	80a78 <uart_putchar+0x1c>
	return 1;

	// Send the character
	UART->UART_THR = c;
   80a66:	4b05      	ldr	r3, [pc, #20]	; (80a7c <uart_putchar+0x20>)
   80a68:	61d8      	str	r0, [r3, #28]
	while(!((UART->UART_SR) & UART_SR_TXEMPTY)); // Wait for the character to be sent, can implement ring buffer to remove the wait
   80a6a:	4b04      	ldr	r3, [pc, #16]	; (80a7c <uart_putchar+0x20>)
   80a6c:	695b      	ldr	r3, [r3, #20]
   80a6e:	f413 7f00 	tst.w	r3, #512	; 0x200
   80a72:	d0fa      	beq.n	80a6a <uart_putchar+0xe>
	return 0;
   80a74:	2000      	movs	r0, #0
   80a76:	4770      	bx	lr
	return 1;
   80a78:	2001      	movs	r0, #1
}
   80a7a:	4770      	bx	lr
   80a7c:	400e0800 	.word	0x400e0800

00080a80 <UART_Handler>:

void UART_Handler(void)
{
   80a80:	b508      	push	{r3, lr}
	uint32_t status = UART->UART_SR;
   80a82:	4b15      	ldr	r3, [pc, #84]	; (80ad8 <UART_Handler+0x58>)
   80a84:	695b      	ldr	r3, [r3, #20]
	
	//Reset UART at overflow error and frame error
	if(status & (UART_SR_OVRE | UART_SR_FRAME | UART_SR_PARE))
   80a86:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   80a8a:	d003      	beq.n	80a94 <UART_Handler+0x14>
	{
		UART->UART_CR = UART_CR_RXEN | UART_CR_TXEN | UART_CR_RSTSTA;
   80a8c:	f44f 71a8 	mov.w	r1, #336	; 0x150
   80a90:	4a11      	ldr	r2, [pc, #68]	; (80ad8 <UART_Handler+0x58>)
   80a92:	6011      	str	r1, [r2, #0]
	}
	
	//Check if message is ready to be received
	if(status & UART_SR_RXRDY)
   80a94:	f013 0f01 	tst.w	r3, #1
   80a98:	d012      	beq.n	80ac0 <UART_Handler+0x40>
	{
		//Check if receive ring buffer is full and 
		if((rx_buffer.tail + 1) % UART_RINGBUFFER_SIZE == rx_buffer.head)
   80a9a:	4810      	ldr	r0, [pc, #64]	; (80adc <UART_Handler+0x5c>)
   80a9c:	7842      	ldrb	r2, [r0, #1]
   80a9e:	1c53      	adds	r3, r2, #1
   80aa0:	4259      	negs	r1, r3
   80aa2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   80aa6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   80aaa:	bf58      	it	pl
   80aac:	424b      	negpl	r3, r1
   80aae:	7801      	ldrb	r1, [r0, #0]
   80ab0:	428b      	cmp	r3, r1
   80ab2:	d006      	beq.n	80ac2 <UART_Handler+0x42>
		{
			printf("ERR: UART RX buffer is full\n\r");
			rx_buffer.data[rx_buffer.tail] = UART->UART_RHR; //Throw away message
			return;
		}
		rx_buffer.data[rx_buffer.tail] = UART->UART_RHR;
   80ab4:	4908      	ldr	r1, [pc, #32]	; (80ad8 <UART_Handler+0x58>)
   80ab6:	6988      	ldr	r0, [r1, #24]
   80ab8:	4908      	ldr	r1, [pc, #32]	; (80adc <UART_Handler+0x5c>)
   80aba:	440a      	add	r2, r1
   80abc:	7090      	strb	r0, [r2, #2]
		rx_buffer.tail = (rx_buffer.tail + 1) % UART_RINGBUFFER_SIZE;
   80abe:	704b      	strb	r3, [r1, #1]
   80ac0:	bd08      	pop	{r3, pc}
			printf("ERR: UART RX buffer is full\n\r");
   80ac2:	4807      	ldr	r0, [pc, #28]	; (80ae0 <UART_Handler+0x60>)
   80ac4:	4b07      	ldr	r3, [pc, #28]	; (80ae4 <UART_Handler+0x64>)
   80ac6:	4798      	blx	r3
			rx_buffer.data[rx_buffer.tail] = UART->UART_RHR; //Throw away message
   80ac8:	4b04      	ldr	r3, [pc, #16]	; (80adc <UART_Handler+0x5c>)
   80aca:	7859      	ldrb	r1, [r3, #1]
   80acc:	4a02      	ldr	r2, [pc, #8]	; (80ad8 <UART_Handler+0x58>)
   80ace:	6992      	ldr	r2, [r2, #24]
   80ad0:	440b      	add	r3, r1
   80ad2:	709a      	strb	r2, [r3, #2]
			return;
   80ad4:	bd08      	pop	{r3, pc}
   80ad6:	bf00      	nop
   80ad8:	400e0800 	.word	0x400e0800
   80adc:	2000046c 	.word	0x2000046c
   80ae0:	00080d24 	.word	0x00080d24
   80ae4:	00080945 	.word	0x00080945

00080ae8 <__libc_init_array>:
   80ae8:	b570      	push	{r4, r5, r6, lr}
   80aea:	4e0f      	ldr	r6, [pc, #60]	; (80b28 <__libc_init_array+0x40>)
   80aec:	4d0f      	ldr	r5, [pc, #60]	; (80b2c <__libc_init_array+0x44>)
   80aee:	1b76      	subs	r6, r6, r5
   80af0:	10b6      	asrs	r6, r6, #2
   80af2:	bf18      	it	ne
   80af4:	2400      	movne	r4, #0
   80af6:	d005      	beq.n	80b04 <__libc_init_array+0x1c>
   80af8:	3401      	adds	r4, #1
   80afa:	f855 3b04 	ldr.w	r3, [r5], #4
   80afe:	4798      	blx	r3
   80b00:	42a6      	cmp	r6, r4
   80b02:	d1f9      	bne.n	80af8 <__libc_init_array+0x10>
   80b04:	4e0a      	ldr	r6, [pc, #40]	; (80b30 <__libc_init_array+0x48>)
   80b06:	4d0b      	ldr	r5, [pc, #44]	; (80b34 <__libc_init_array+0x4c>)
   80b08:	f000 f91e 	bl	80d48 <_init>
   80b0c:	1b76      	subs	r6, r6, r5
   80b0e:	10b6      	asrs	r6, r6, #2
   80b10:	bf18      	it	ne
   80b12:	2400      	movne	r4, #0
   80b14:	d006      	beq.n	80b24 <__libc_init_array+0x3c>
   80b16:	3401      	adds	r4, #1
   80b18:	f855 3b04 	ldr.w	r3, [r5], #4
   80b1c:	4798      	blx	r3
   80b1e:	42a6      	cmp	r6, r4
   80b20:	d1f9      	bne.n	80b16 <__libc_init_array+0x2e>
   80b22:	bd70      	pop	{r4, r5, r6, pc}
   80b24:	bd70      	pop	{r4, r5, r6, pc}
   80b26:	bf00      	nop
   80b28:	00080d54 	.word	0x00080d54
   80b2c:	00080d54 	.word	0x00080d54
   80b30:	00080d5c 	.word	0x00080d5c
   80b34:	00080d54 	.word	0x00080d54

00080b38 <register_fini>:
   80b38:	4b02      	ldr	r3, [pc, #8]	; (80b44 <register_fini+0xc>)
   80b3a:	b113      	cbz	r3, 80b42 <register_fini+0xa>
   80b3c:	4802      	ldr	r0, [pc, #8]	; (80b48 <register_fini+0x10>)
   80b3e:	f000 b805 	b.w	80b4c <atexit>
   80b42:	4770      	bx	lr
   80b44:	00000000 	.word	0x00000000
   80b48:	00080b59 	.word	0x00080b59

00080b4c <atexit>:
   80b4c:	2300      	movs	r3, #0
   80b4e:	4601      	mov	r1, r0
   80b50:	461a      	mov	r2, r3
   80b52:	4618      	mov	r0, r3
   80b54:	f000 b81e 	b.w	80b94 <__register_exitproc>

00080b58 <__libc_fini_array>:
   80b58:	b538      	push	{r3, r4, r5, lr}
   80b5a:	4c0a      	ldr	r4, [pc, #40]	; (80b84 <__libc_fini_array+0x2c>)
   80b5c:	4d0a      	ldr	r5, [pc, #40]	; (80b88 <__libc_fini_array+0x30>)
   80b5e:	1b64      	subs	r4, r4, r5
   80b60:	10a4      	asrs	r4, r4, #2
   80b62:	d00a      	beq.n	80b7a <__libc_fini_array+0x22>
   80b64:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   80b68:	3b01      	subs	r3, #1
   80b6a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   80b6e:	3c01      	subs	r4, #1
   80b70:	f855 3904 	ldr.w	r3, [r5], #-4
   80b74:	4798      	blx	r3
   80b76:	2c00      	cmp	r4, #0
   80b78:	d1f9      	bne.n	80b6e <__libc_fini_array+0x16>
   80b7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   80b7e:	f000 b8ed 	b.w	80d5c <_fini>
   80b82:	bf00      	nop
   80b84:	00080d6c 	.word	0x00080d6c
   80b88:	00080d68 	.word	0x00080d68

00080b8c <__retarget_lock_acquire_recursive>:
   80b8c:	4770      	bx	lr
   80b8e:	bf00      	nop

00080b90 <__retarget_lock_release_recursive>:
   80b90:	4770      	bx	lr
   80b92:	bf00      	nop

00080b94 <__register_exitproc>:
   80b94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   80b98:	4d2c      	ldr	r5, [pc, #176]	; (80c4c <__register_exitproc+0xb8>)
   80b9a:	4606      	mov	r6, r0
   80b9c:	6828      	ldr	r0, [r5, #0]
   80b9e:	4698      	mov	r8, r3
   80ba0:	460f      	mov	r7, r1
   80ba2:	4691      	mov	r9, r2
   80ba4:	f7ff fff2 	bl	80b8c <__retarget_lock_acquire_recursive>
   80ba8:	4b29      	ldr	r3, [pc, #164]	; (80c50 <__register_exitproc+0xbc>)
   80baa:	681c      	ldr	r4, [r3, #0]
   80bac:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   80bb0:	2b00      	cmp	r3, #0
   80bb2:	d03e      	beq.n	80c32 <__register_exitproc+0x9e>
   80bb4:	685a      	ldr	r2, [r3, #4]
   80bb6:	2a1f      	cmp	r2, #31
   80bb8:	dc1c      	bgt.n	80bf4 <__register_exitproc+0x60>
   80bba:	f102 0e01 	add.w	lr, r2, #1
   80bbe:	b176      	cbz	r6, 80bde <__register_exitproc+0x4a>
   80bc0:	2101      	movs	r1, #1
   80bc2:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   80bc6:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   80bca:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   80bce:	4091      	lsls	r1, r2
   80bd0:	4308      	orrs	r0, r1
   80bd2:	2e02      	cmp	r6, #2
   80bd4:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   80bd8:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   80bdc:	d023      	beq.n	80c26 <__register_exitproc+0x92>
   80bde:	3202      	adds	r2, #2
   80be0:	f8c3 e004 	str.w	lr, [r3, #4]
   80be4:	6828      	ldr	r0, [r5, #0]
   80be6:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   80bea:	f7ff ffd1 	bl	80b90 <__retarget_lock_release_recursive>
   80bee:	2000      	movs	r0, #0
   80bf0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80bf4:	4b17      	ldr	r3, [pc, #92]	; (80c54 <__register_exitproc+0xc0>)
   80bf6:	b30b      	cbz	r3, 80c3c <__register_exitproc+0xa8>
   80bf8:	f44f 70c8 	mov.w	r0, #400	; 0x190
   80bfc:	f3af 8000 	nop.w
   80c00:	4603      	mov	r3, r0
   80c02:	b1d8      	cbz	r0, 80c3c <__register_exitproc+0xa8>
   80c04:	2000      	movs	r0, #0
   80c06:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   80c0a:	f04f 0e01 	mov.w	lr, #1
   80c0e:	6058      	str	r0, [r3, #4]
   80c10:	6019      	str	r1, [r3, #0]
   80c12:	4602      	mov	r2, r0
   80c14:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   80c18:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   80c1c:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   80c20:	2e00      	cmp	r6, #0
   80c22:	d0dc      	beq.n	80bde <__register_exitproc+0x4a>
   80c24:	e7cc      	b.n	80bc0 <__register_exitproc+0x2c>
   80c26:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   80c2a:	4301      	orrs	r1, r0
   80c2c:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   80c30:	e7d5      	b.n	80bde <__register_exitproc+0x4a>
   80c32:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   80c36:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   80c3a:	e7bb      	b.n	80bb4 <__register_exitproc+0x20>
   80c3c:	6828      	ldr	r0, [r5, #0]
   80c3e:	f7ff ffa7 	bl	80b90 <__retarget_lock_release_recursive>
   80c42:	f04f 30ff 	mov.w	r0, #4294967295
   80c46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80c4a:	bf00      	nop
   80c4c:	20000440 	.word	0x20000440
   80c50:	00080d44 	.word	0x00080d44
   80c54:	00000000 	.word	0x00000000
   80c58:	304e4143 	.word	0x304e4143
   80c5c:	73656d20 	.word	0x73656d20
   80c60:	65676173 	.word	0x65676173
   80c64:	72726120 	.word	0x72726120
   80c68:	64657669 	.word	0x64657669
   80c6c:	206e6920 	.word	0x206e6920
   80c70:	2d6e6f6e 	.word	0x2d6e6f6e
   80c74:	64657375 	.word	0x64657375
   80c78:	69616d20 	.word	0x69616d20
   80c7c:	786f626c 	.word	0x786f626c
   80c80:	00000d0a 	.word	0x00000d0a
   80c84:	646c656d 	.word	0x646c656d
   80c88:	00676e69 	.word	0x00676e69
   80c8c:	25206469 	.word	0x25206469
   80c90:	00000a64 	.word	0x00000a64
   80c94:	676e656c 	.word	0x676e656c
   80c98:	25206874 	.word	0x25206874
   80c9c:	00000a64 	.word	0x00000a64
   80ca0:	61746164 	.word	0x61746164
   80ca4:	0a632520 	.word	0x0a632520
   80ca8:	00000000 	.word	0x00000000
   80cac:	25207075 	.word	0x25207075
   80cb0:	00000a63 	.word	0x00000a63
   80cb4:	6e776f64 	.word	0x6e776f64
   80cb8:	0a632520 	.word	0x0a632520
   80cbc:	00000000 	.word	0x00000000
   80cc0:	7466656c 	.word	0x7466656c
   80cc4:	0a632520 	.word	0x0a632520
   80cc8:	00000000 	.word	0x00000000
   80ccc:	68676972 	.word	0x68676972
   80cd0:	63252074 	.word	0x63252074
   80cd4:	0000000a 	.word	0x0000000a
   80cd8:	7475656e 	.word	0x7475656e
   80cdc:	206c6172 	.word	0x206c6172
   80ce0:	000a6325 	.word	0x000a6325
   80ce4:	656d6147 	.word	0x656d6147
   80ce8:	65766f20 	.word	0x65766f20
   80cec:	00000072 	.word	0x00000072
   80cf0:	2d2d2d2d 	.word	0x2d2d2d2d
   80cf4:	2d2d2d2d 	.word	0x2d2d2d2d
   80cf8:	2d2d2d2d 	.word	0x2d2d2d2d
   80cfc:	2d2d2d2d 	.word	0x2d2d2d2d
   80d00:	2d2d2d2d 	.word	0x2d2d2d2d
   80d04:	64253e2d 	.word	0x64253e2d
   80d08:	0000000a 	.word	0x0000000a
   80d0c:	534c4146 	.word	0x534c4146
   80d10:	00006325 	.word	0x00006325
   80d14:	25555254 	.word	0x25555254
   80d18:	00000a63 	.word	0x00000a63
   80d1c:	6c756e28 	.word	0x6c756e28
   80d20:	0000296c 	.word	0x0000296c
   80d24:	3a525245 	.word	0x3a525245
   80d28:	52415520 	.word	0x52415520
   80d2c:	58522054 	.word	0x58522054
   80d30:	66756220 	.word	0x66756220
   80d34:	20726566 	.word	0x20726566
   80d38:	66207369 	.word	0x66207369
   80d3c:	0a6c6c75 	.word	0x0a6c6c75
   80d40:	0000000d 	.word	0x0000000d

00080d44 <_global_impure_ptr>:
   80d44:	20000018                                ... 

00080d48 <_init>:
   80d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80d4a:	bf00      	nop
   80d4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   80d4e:	bc08      	pop	{r3}
   80d50:	469e      	mov	lr, r3
   80d52:	4770      	bx	lr

00080d54 <__init_array_start>:
   80d54:	00080b39 	.word	0x00080b39

00080d58 <__frame_dummy_init_array_entry>:
   80d58:	00080119                                ....

00080d5c <_fini>:
   80d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80d5e:	bf00      	nop
   80d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
   80d62:	bc08      	pop	{r3}
   80d64:	469e      	mov	lr, r3
   80d66:	4770      	bx	lr

00080d68 <__fini_array_start>:
   80d68:	000800f5 	.word	0x000800f5
